{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nimport { nothing, noChange } from '../lit-html.js';\nimport { directive, Directive, PartType } from '../directive.js';\nconst HTML_RESULT = 1;\nexport class UnsafeHTMLDirective extends Directive {\n  constructor(partInfo) {\n    super(partInfo);\n    this._value = nothing;\n\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error(`${this.constructor.directiveName}() can only be used in child bindings`);\n    }\n  }\n\n  render(value) {\n    if (value === nothing || value == null) {\n      this._templateResult = undefined;\n      return this._value = value;\n    }\n\n    if (value === noChange) {\n      return value;\n    }\n\n    if (typeof value != 'string') {\n      throw new Error(`${this.constructor.directiveName}() called with a non-string value`);\n    }\n\n    if (value === this._value) {\n      return this._templateResult;\n    }\n\n    this._value = value;\n    const strings = [value]; // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    strings.raw = strings; // WARNING: impersonating a TemplateResult like this is extremely\n    // dangerous. Third-party directives should not do this.\n\n    return this._templateResult = {\n      // Cast to a known set of integers that satisfy ResultType so that we\n      // don't have to export ResultType and possibly encourage this pattern.\n      // This property needs to remain unminified.\n      ['_$litType$']: this.constructor.resultType,\n      strings,\n      values: []\n    };\n  }\n\n}\nUnsafeHTMLDirective.directiveName = 'unsafeHTML';\nUnsafeHTMLDirective.resultType = HTML_RESULT;\n/**\n * Renders the result as HTML, rather than text.\n *\n * The values `undefined`, `null`, and `nothing`, will all result in no content\n * (empty string) being rendered.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\n\nexport const unsafeHTML = directive(UnsafeHTMLDirective);","map":{"version":3,"mappings":"AAAA;;;;;AAMA,SAAQA,OAAR,EAAiCC,QAAjC,QAAgD,gBAAhD;AACA,SAAQC,SAAR,EAAmBC,SAAnB,EAAwCC,QAAxC,QAAuD,iBAAvD;AAEA,MAAMC,WAAW,GAAG,CAApB;AAEA,OAAM,MAAOC,mBAAP,SAAmCH,SAAnC,CAA4C;EAOhDI,YAAYC,QAAZ,EAA8B;IAC5B,MAAMA,QAAN;IAJM,cAAkBR,OAAlB;;IAKN,IAAIQ,QAAQ,CAACC,IAAT,KAAkBL,QAAQ,CAACM,KAA/B,EAAsC;MACpC,MAAM,IAAIC,KAAJ,CACJ,GACG,KAAKJ,WAAL,CAAgDK,aACnD,uCAHI,CAAN;IAKD;EACF;;EAEDC,MAAM,CAACC,KAAD,EAAoE;IACxE,IAAIA,KAAK,KAAKd,OAAV,IAAqBc,KAAK,IAAI,IAAlC,EAAwC;MACtC,KAAKC,eAAL,GAAuBC,SAAvB;MACA,OAAQ,KAAKC,MAAL,GAAcH,KAAtB;IACD;;IACD,IAAIA,KAAK,KAAKb,QAAd,EAAwB;MACtB,OAAOa,KAAP;IACD;;IACD,IAAI,OAAOA,KAAP,IAAgB,QAApB,EAA8B;MAC5B,MAAM,IAAIH,KAAJ,CACJ,GACG,KAAKJ,WAAL,CAAgDK,aACnD,mCAHI,CAAN;IAKD;;IACD,IAAIE,KAAK,KAAK,KAAKG,MAAnB,EAA2B;MACzB,OAAO,KAAKF,eAAZ;IACD;;IACD,KAAKE,MAAL,GAAcH,KAAd;IACA,MAAMI,OAAO,GAAG,CAACJ,KAAD,CAAhB,CAnBwE,CAoBxE;;IACCI,OAAe,CAACC,GAAhB,GAAsBD,OAAtB,CArBuE,CAsBxE;IACA;;IACA,OAAQ,KAAKH,eAAL,GAAuB;MAC7B;MACA;MACA;MACA,CAAC,YAAD,GAAiB,KAAKR,WAAL,CACda,UAL0B;MAM7BF,OAN6B;MAO7BG,MAAM,EAAE;IAPqB,CAA/B;EASD;;AAnD+C;AACzCf,oCAAgB,YAAhB;AACAA,iCAAaD,WAAb;AAoDT;;;;;;;;;;;AAUA,OAAO,MAAMiB,UAAU,GAAGpB,SAAS,CAACI,mBAAD,CAA5B","names":["nothing","noChange","directive","Directive","PartType","HTML_RESULT","UnsafeHTMLDirective","constructor","partInfo","type","CHILD","Error","directiveName","render","value","_templateResult","undefined","_value","strings","raw","resultType","values","unsafeHTML"],"sources":["/Users/marcwelz/Library/Mobile Documents/com~apple~CloudDocs/probe_ipa/project/ipa_frontend/node_modules/lit-html/src/directives/unsafe-html.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {nothing, TemplateResult, noChange} from '../lit-html.js';\nimport {directive, Directive, PartInfo, PartType} from '../directive.js';\n\nconst HTML_RESULT = 1;\n\nexport class UnsafeHTMLDirective extends Directive {\n  static directiveName = 'unsafeHTML';\n  static resultType = HTML_RESULT;\n\n  private _value: unknown = nothing;\n  private _templateResult?: TemplateResult;\n\n  constructor(partInfo: PartInfo) {\n    super(partInfo);\n    if (partInfo.type !== PartType.CHILD) {\n      throw new Error(\n        `${\n          (this.constructor as typeof UnsafeHTMLDirective).directiveName\n        }() can only be used in child bindings`\n      );\n    }\n  }\n\n  render(value: string | typeof nothing | typeof noChange | undefined | null) {\n    if (value === nothing || value == null) {\n      this._templateResult = undefined;\n      return (this._value = value);\n    }\n    if (value === noChange) {\n      return value;\n    }\n    if (typeof value != 'string') {\n      throw new Error(\n        `${\n          (this.constructor as typeof UnsafeHTMLDirective).directiveName\n        }() called with a non-string value`\n      );\n    }\n    if (value === this._value) {\n      return this._templateResult;\n    }\n    this._value = value;\n    const strings = [value] as unknown as TemplateStringsArray;\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (strings as any).raw = strings;\n    // WARNING: impersonating a TemplateResult like this is extremely\n    // dangerous. Third-party directives should not do this.\n    return (this._templateResult = {\n      // Cast to a known set of integers that satisfy ResultType so that we\n      // don't have to export ResultType and possibly encourage this pattern.\n      // This property needs to remain unminified.\n      ['_$litType$']: (this.constructor as typeof UnsafeHTMLDirective)\n        .resultType as 1 | 2,\n      strings,\n      values: [],\n    });\n  }\n}\n\n/**\n * Renders the result as HTML, rather than text.\n *\n * The values `undefined`, `null`, and `nothing`, will all result in no content\n * (empty string) being rendered.\n *\n * Note, this is unsafe to use with any user-provided input that hasn't been\n * sanitized or escaped, as it may lead to cross-site-scripting\n * vulnerabilities.\n */\nexport const unsafeHTML = directive(UnsafeHTMLDirective);\n"]},"metadata":{},"sourceType":"module"}