{"ast":null,"code":"/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar _a, _b;\n\nimport { _$LH } from './lit-html.js';\nconst {\n  _ChildPart: ChildPart\n} = _$LH;\nconst ENABLE_SHADYDOM_NOPATCH = true;\nconst wrap = ENABLE_SHADYDOM_NOPATCH && ((_a = window.ShadyDOM) === null || _a === void 0 ? void 0 : _a.inUse) && ((_b = window.ShadyDOM) === null || _b === void 0 ? void 0 : _b.noPatch) === true ? window.ShadyDOM.wrap : node => node;\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\n\nexport const isPrimitive = value => value === null || typeof value != 'object' && typeof value != 'function';\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2\n};\n/**\n * Tests if a value is a TemplateResult.\n */\n\nexport const isTemplateResult = (value, type) => type === undefined ? // This property needs to remain unminified.\n(value === null || value === void 0 ? void 0 : value['_$litType$']) !== undefined : (value === null || value === void 0 ? void 0 : value['_$litType$']) === type;\n/**\n * Tests if a value is a DirectiveResult.\n */\n\nexport const isDirectiveResult = value => // This property needs to remain unminified.\n(value === null || value === void 0 ? void 0 : value['_$litDirective$']) !== undefined;\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\n\nexport const getDirectiveClass = value => // This property needs to remain unminified.\nvalue === null || value === void 0 ? void 0 : value['_$litDirective$'];\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\n\nexport const isSingleExpression = part => part.strings === undefined;\n\nconst createMarker = () => document.createComment('');\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\n\n\nexport const insertPart = (containerPart, refPart, part) => {\n  var _a;\n\n  const container = wrap(containerPart._$startNode).parentNode;\n  const refNode = refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(startNode, endNode, containerPart, containerPart.options);\n  } else {\n    const endNode = wrap(part._$endNode).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n\n    if (parentChanged) {\n      (_a = part._$reparentDisconnectables) === null || _a === void 0 ? void 0 : _a.call(part, containerPart); // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n\n      part._$parent = containerPart; // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n\n      let newConnectionState;\n\n      if (part._$notifyConnectionChanged !== undefined && (newConnectionState = containerPart._$isConnected) !== oldParent._$isConnected) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n\n    if (endNode !== refNode || parentChanged) {\n      let start = part._$startNode;\n\n      while (start !== endNode) {\n        const n = wrap(start).nextSibling;\n        wrap(container).insertBefore(start, refNode);\n        start = n;\n      }\n    }\n  }\n\n  return part;\n};\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\n\nexport const setChildPartValue = function (part, value) {\n  let directiveParent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : part;\n\n  part._$setValue(value, directiveParent);\n\n  return part;\n}; // A sentinal value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\n\nconst RESET_VALUE = {};\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\n\nexport const setCommittedValue = function (part) {\n  let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : RESET_VALUE;\n  return part._$committedValue = value;\n};\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being commited.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\n\nexport const getCommittedValue = part => part._$committedValue;\n/**\n * Removes a ChildPart from the DOM, including any of its content.\n *\n * @param part The Part to remove\n */\n\nexport const removePart = part => {\n  var _a;\n\n  (_a = part._$notifyConnectionChanged) === null || _a === void 0 ? void 0 : _a.call(part, false, true);\n  let start = part._$startNode;\n  const end = wrap(part._$endNode).nextSibling;\n\n  while (start !== end) {\n    const n = wrap(start).nextSibling;\n    wrap(start).remove();\n    start = n;\n  }\n};\nexport const clearPart = part => {\n  part._$clear();\n};","map":{"version":3,"mappings":"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","names":["_$LH","_ChildPart","ChildPart","ENABLE_SHADYDOM_NOPATCH","wrap","ShadyDOM","_a","inUse","_b","noPatch","window","node","isPrimitive","value","TemplateResultType","HTML","SVG","isTemplateResult","type","undefined","isDirectiveResult","getDirectiveClass","isSingleExpression","part","strings","createMarker","document","createComment","insertPart","containerPart","refPart","container","_$startNode","parentNode","refNode","_$endNode","startNode","insertBefore","endNode","options","nextSibling","oldParent","_$parent","parentChanged","_$reparentDisconnectables","newConnectionState","_$notifyConnectionChanged","_$isConnected","start","n","setChildPartValue","directiveParent","_$setValue","RESET_VALUE","setCommittedValue","_$committedValue","getCommittedValue","removePart","end","remove","clearPart","_$clear"],"sources":["/Users/marcwelz/Library/Mobile Documents/com~apple~CloudDocs/probe_ipa/project/ipa_frontend/node_modules/lit-html/src/directive-helpers.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2020 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\nimport {_$LH, Part, DirectiveParent, TemplateResult} from './lit-html.js';\nimport {\n  DirectiveResult,\n  DirectiveClass,\n  PartInfo,\n  AttributePartInfo,\n} from './directive.js';\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\n\nconst {_ChildPart: ChildPart} = _$LH;\n\ntype ChildPart = InstanceType<typeof ChildPart>;\n\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\n/**\n * Tests if a value is a primitive value.\n *\n * See https://tc39.github.io/ecma262/#sec-typeof-operator\n */\nexport const isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\n\nexport const TemplateResultType = {\n  HTML: 1,\n  SVG: 2,\n} as const;\n\nexport type TemplateResultType =\n  typeof TemplateResultType[keyof typeof TemplateResultType];\n\n/**\n * Tests if a value is a TemplateResult.\n */\nexport const isTemplateResult = (\n  value: unknown,\n  type?: TemplateResultType\n): value is TemplateResult =>\n  type === undefined\n    ? // This property needs to remain unminified.\n      (value as TemplateResult)?.['_$litType$'] !== undefined\n    : (value as TemplateResult)?.['_$litType$'] === type;\n\n/**\n * Tests if a value is a DirectiveResult.\n */\nexport const isDirectiveResult = (value: unknown): value is DirectiveResult =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'] !== undefined;\n\n/**\n * Retrieves the Directive class for a DirectiveResult\n */\nexport const getDirectiveClass = (value: unknown): DirectiveClass | undefined =>\n  // This property needs to remain unminified.\n  (value as DirectiveResult)?.['_$litDirective$'];\n\n/**\n * Tests whether a part has only a single-expression with no strings to\n * interpolate between.\n *\n * Only AttributePart and PropertyPart can have multiple expressions.\n * Multi-expression parts have a `strings` property and single-expression\n * parts do not.\n */\nexport const isSingleExpression = (part: PartInfo) =>\n  (part as AttributePartInfo).strings === undefined;\n\nconst createMarker = () => document.createComment('');\n\n/**\n * Inserts a ChildPart into the given container ChildPart's DOM, either at the\n * end of the container ChildPart, or before the optional `refPart`.\n *\n * This does not add the part to the containerPart's committed value. That must\n * be done by callers.\n *\n * @param containerPart Part within which to add the new ChildPart\n * @param refPart Part before which to add the new ChildPart; when omitted the\n *     part added to the end of the `containerPart`\n * @param part Part to insert, or undefined to create a new part\n */\nexport const insertPart = (\n  containerPart: ChildPart,\n  refPart?: ChildPart,\n  part?: ChildPart\n): ChildPart => {\n  const container = wrap(containerPart._$startNode).parentNode!;\n\n  const refNode =\n    refPart === undefined ? containerPart._$endNode : refPart._$startNode;\n\n  if (part === undefined) {\n    const startNode = wrap(container).insertBefore(createMarker(), refNode);\n    const endNode = wrap(container).insertBefore(createMarker(), refNode);\n    part = new ChildPart(\n      startNode,\n      endNode,\n      containerPart,\n      containerPart.options\n    );\n  } else {\n    const endNode = wrap(part._$endNode!).nextSibling;\n    const oldParent = part._$parent;\n    const parentChanged = oldParent !== containerPart;\n    if (parentChanged) {\n      part._$reparentDisconnectables?.(containerPart);\n      // Note that although `_$reparentDisconnectables` updates the part's\n      // `_$parent` reference after unlinking from its current parent, that\n      // method only exists if Disconnectables are present, so we need to\n      // unconditionally set it here\n      part._$parent = containerPart;\n      // Since the _$isConnected getter is somewhat costly, only\n      // read it once we know the subtree has directives that need\n      // to be notified\n      let newConnectionState;\n      if (\n        part._$notifyConnectionChanged !== undefined &&\n        (newConnectionState = containerPart._$isConnected) !==\n          oldParent!._$isConnected\n      ) {\n        part._$notifyConnectionChanged(newConnectionState);\n      }\n    }\n    if (endNode !== refNode || parentChanged) {\n      let start: Node | null = part._$startNode;\n      while (start !== endNode) {\n        const n: Node | null = wrap(start!).nextSibling;\n        wrap(container).insertBefore(start!, refNode);\n        start = n;\n      }\n    }\n  }\n\n  return part;\n};\n\n/**\n * Sets the value of a Part.\n *\n * Note that this should only be used to set/update the value of user-created\n * parts (i.e. those created using `insertPart`); it should not be used\n * by directives to set the value of the directive's container part. Directives\n * should return a value from `update`/`render` to update their part state.\n *\n * For directives that require setting their part value asynchronously, they\n * should extend `AsyncDirective` and call `this.setValue()`.\n *\n * @param part Part to set\n * @param value Value to set\n * @param index For `AttributePart`s, the index to set\n * @param directiveParent Used internally; should not be set by user\n */\nexport const setChildPartValue = <T extends ChildPart>(\n  part: T,\n  value: unknown,\n  directiveParent: DirectiveParent = part\n): T => {\n  part._$setValue(value, directiveParent);\n  return part;\n};\n\n// A sentinal value that can never appear as a part value except when set by\n// live(). Used to force a dirty-check to fail and cause a re-render.\nconst RESET_VALUE = {};\n\n/**\n * Sets the committed value of a ChildPart directly without triggering the\n * commit stage of the part.\n *\n * This is useful in cases where a directive needs to update the part such\n * that the next update detects a value change or not. When value is omitted,\n * the next update will be guaranteed to be detected as a change.\n *\n * @param part\n * @param value\n */\nexport const setCommittedValue = (part: Part, value: unknown = RESET_VALUE) =>\n  (part._$committedValue = value);\n\n/**\n * Returns the committed value of a ChildPart.\n *\n * The committed value is used for change detection and efficient updates of\n * the part. It can differ from the value set by the template or directive in\n * cases where the template value is transformed before being commited.\n *\n * - `TemplateResult`s are committed as a `TemplateInstance`\n * - Iterables are committed as `Array<ChildPart>`\n * - All other types are committed as the template value or value returned or\n *   set by a directive.\n *\n * @param part\n */\nexport const getCommittedValue = (part: ChildPart) => part._$committedValue;\n\n/**\n * Removes a ChildPart from the DOM, including any of its content.\n *\n * @param part The Part to remove\n */\nexport const removePart = (part: ChildPart) => {\n  part._$notifyConnectionChanged?.(false, true);\n  let start: ChildNode | null = part._$startNode;\n  const end: ChildNode | null = wrap(part._$endNode!).nextSibling;\n  while (start !== end) {\n    const n: ChildNode | null = wrap(start!).nextSibling;\n    (wrap(start!) as ChildNode).remove();\n    start = n;\n  }\n};\n\nexport const clearPart = (part: ChildPart) => {\n  part._$clear();\n};\n"]},"metadata":{},"sourceType":"module"}