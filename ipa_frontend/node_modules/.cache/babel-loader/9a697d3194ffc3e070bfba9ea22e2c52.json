{"ast":null,"code":"/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\nvar _a, _b, _c, _d;\n\nconst DEV_MODE = true;\nconst ENABLE_EXTRA_SECURITY_HOOKS = true;\nconst ENABLE_SHADYDOM_NOPATCH = true;\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\n\nconst debugLogEvent = DEV_MODE ? event => {\n  const shouldEmit = window.emitLitDebugLogEvents;\n\n  if (!shouldEmit) {\n    return;\n  }\n\n  window.dispatchEvent(new CustomEvent('lit-debug', {\n    detail: event\n  }));\n} : undefined; // Used for connecting beginRender and endRender events when there are nested\n// renders when errors are thrown preventing an endRender event from being\n// called.\n\nlet debugLogRenderId = 0;\nlet issueWarning;\n\nif (DEV_MODE) {\n  (_a = globalThis.litIssuedWarnings) !== null && _a !== void 0 ? _a : globalThis.litIssuedWarnings = new Set(); // Issue a warning, if we haven't already.\n\n  issueWarning = (code, warning) => {\n    warning += code ? ` See https://lit.dev/msg/${code} for more information.` : '';\n\n    if (!globalThis.litIssuedWarnings.has(warning)) {\n      console.warn(warning);\n      globalThis.litIssuedWarnings.add(warning);\n    }\n  };\n\n  issueWarning('dev-mode', `Lit is in dev mode. Not recommended for production!`);\n}\n\nconst wrap = ENABLE_SHADYDOM_NOPATCH && ((_b = window.ShadyDOM) === null || _b === void 0 ? void 0 : _b.inUse) && ((_c = window.ShadyDOM) === null || _c === void 0 ? void 0 : _c.noPatch) === true ? window.ShadyDOM.wrap : node => node;\nconst trustedTypes = globalThis.trustedTypes;\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\n\nconst policy = trustedTypes ? trustedTypes.createPolicy('lit-html', {\n  createHTML: s => s\n}) : undefined;\n\nconst identityFunction = value => value;\n\nconst noopSanitizer = (_node, _name, _type) => identityFunction;\n/** Sets the global sanitizer factory. */\n\n\nconst setSanitizer = newSanitizer => {\n  if (!ENABLE_EXTRA_SECURITY_HOOKS) {\n    return;\n  }\n\n  if (sanitizerFactoryInternal !== noopSanitizer) {\n    throw new Error(`Attempted to overwrite existing lit-html security policy.` + ` setSanitizeDOMValueFactory should be called at most once.`);\n  }\n\n  sanitizerFactoryInternal = newSanitizer;\n};\n/**\n * Only used in internal tests, not a part of the public API.\n */\n\n\nconst _testOnlyClearSanitizerFactoryDoNotCallOrElse = () => {\n  sanitizerFactoryInternal = noopSanitizer;\n};\n\nconst createSanitizer = (node, name, type) => {\n  return sanitizerFactoryInternal(node, name, type);\n}; // Added to an attribute name to mark the attribute as bound so we can find\n// it easily.\n\n\nconst boundAttributeSuffix = '$lit$'; // This marker is used in many syntactic positions in HTML, so it must be\n// a valid element name and attribute name. We don't support dynamic names (yet)\n// but this at least ensures that the parse tree is closer to the template\n// intention.\n\nconst marker = `lit$${String(Math.random()).slice(9)}$`; // String used to tell if a comment is a marker comment\n\nconst markerMatch = '?' + marker; // Text used to insert a comment marker node. We use processing instruction\n// syntax because it's slightly smaller, but parses as a comment node.\n\nconst nodeMarker = `<${markerMatch}>`;\nconst d = document; // Creates a dynamic marker. We never have to search for these in the DOM.\n\nconst createMarker = function () {\n  let v = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  return d.createComment(v);\n};\n\nconst isPrimitive = value => value === null || typeof value != 'object' && typeof value != 'function';\n\nconst isArray = Array.isArray;\n\nconst isIterable = value => isArray(value) || // eslint-disable-next-line @typescript-eslint/no-explicit-any\ntypeof (value === null || value === void 0 ? void 0 : value[Symbol.iterator]) === 'function';\n\nconst SPACE_CHAR = `[ \\t\\n\\f\\r]`;\nconst ATTR_VALUE_CHAR = `[^ \\t\\n\\f\\r\"'\\`<>=]`;\nconst NAME_CHAR = `[^\\\\s\"'>=/]`; // These regexes represent the five parsing states that we care about in the\n// Template's HTML scanner. They match the *end* of the state they're named\n// after.\n// Depending on the match, we transition to a new state. If there's no match,\n// we stay in the same state.\n// Note that the regexes are stateful. We utilize lastIndex and sync it\n// across the multiple regexes used. In addition to the five regexes below\n// we also dynamically create a regex to find the matching end tags for raw\n// text elements.\n\n/**\n * End of text is: `<` followed by:\n *   (comment start) or (tag) or (dynamic tag binding)\n */\n\nconst textEndRegex = /<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g;\nconst COMMENT_START = 1;\nconst TAG_NAME = 2;\nconst DYNAMIC_TAG_NAME = 3;\nconst commentEndRegex = /-->/g;\n/**\n * Comments not started with <!--, like </{, can be ended by a single `>`\n */\n\nconst comment2EndRegex = />/g;\n/**\n * The tagEnd regex matches the end of the \"inside an opening\" tag syntax\n * position. It either matches a `>`, an attribute-like sequence, or the end\n * of the string after a space (attribute-name position ending).\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\t\\n\\f\\r\" are HTML space characters:\n * https://infra.spec.whatwg.org/#ascii-whitespace\n *\n * So an attribute is:\n *  * The name: any character except a whitespace character, (\"), ('), \">\",\n *    \"=\", or \"/\". Note: this is different from the HTML spec which also excludes control characters.\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\n\nconst tagEndRegex = new RegExp(`>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|(\"|')|))|$)`, 'g');\nconst ENTIRE_MATCH = 0;\nconst ATTRIBUTE_NAME = 1;\nconst SPACES_AND_EQUALS = 2;\nconst QUOTE_CHAR = 3;\nconst singleQuoteAttrEndRegex = /'/g;\nconst doubleQuoteAttrEndRegex = /\"/g;\n/**\n * Matches the raw text elements.\n *\n * Comments are not parsed within raw text elements, so we need to search their\n * text content for marker strings.\n */\n\nconst rawTextElement = /^(?:script|style|textarea|title)$/i;\n/** TemplateResult types */\n\nconst HTML_RESULT = 1;\nconst SVG_RESULT = 2; // TemplatePart types\n// IMPORTANT: these must match the values in PartType\n\nconst ATTRIBUTE_PART = 1;\nconst CHILD_PART = 2;\nconst PROPERTY_PART = 3;\nconst BOOLEAN_ATTRIBUTE_PART = 4;\nconst EVENT_PART = 5;\nconst ELEMENT_PART = 6;\nconst COMMENT_PART = 7;\n/**\n * Generates a template literal tag function that returns a TemplateResult with\n * the given result type.\n */\n\nconst tag = type => function (strings) {\n  // Warn against templates octal escape sequences\n  // We do this here rather than in render so that the warning is closer to the\n  // template definition.\n  if (DEV_MODE && strings.some(s => s === undefined)) {\n    console.warn('Some template strings are undefined.\\n' + 'This is probably caused by illegal octal escape sequences.');\n  }\n\n  for (var _len = arguments.length, values = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n    values[_key - 1] = arguments[_key];\n  }\n\n  return {\n    // This property needs to remain unminified.\n    ['_$litType$']: type,\n    strings,\n    values\n  };\n};\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * ```ts\n * const header = (title: string) => html`<h1>${title}</h1>`;\n * ```\n *\n * The `html` tag returns a description of the DOM to render as a value. It is\n * lazy, meaning no work is done until the template is rendered. When rendering,\n * if a template comes from the same expression as a previously rendered result,\n * it's efficiently updated instead of replaced.\n */\n\n\nexport const html = tag(HTML_RESULT);\n/**\n * Interprets a template literal as an SVG fragment that can efficiently\n * render to and update a container.\n *\n * ```ts\n * const rect = svg`<rect width=\"10\" height=\"10\"></rect>`;\n *\n * const myImage = html`\n *   <svg viewBox=\"0 0 10 10\" xmlns=\"http://www.w3.org/2000/svg\">\n *     ${rect}\n *   </svg>`;\n * ```\n *\n * The `svg` *tag function* should only be used for SVG fragments, or elements\n * that would be contained **inside** an `<svg>` HTML element. A common error is\n * placing an `<svg>` *element* in a template tagged with the `svg` tag\n * function. The `<svg>` element is an HTML element and should be used within a\n * template tagged with the {@linkcode html} tag function.\n *\n * In LitElement usage, it's invalid to return an SVG fragment from the\n * `render()` method, as the SVG fragment will be contained within the element's\n * shadow root and thus cannot be used within an `<svg>` HTML element.\n */\n\nexport const svg = tag(SVG_RESULT);\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\n\nexport const noChange = Symbol.for('lit-noChange');\n/**\n * A sentinel value that signals a ChildPart to fully clear its content.\n *\n * ```ts\n * const button = html`${\n *  user.isAdmin\n *    ? html`<button>DELETE</button>`\n *    : nothing\n * }`;\n * ```\n *\n * Prefer using `nothing` over other falsy values as it provides a consistent\n * behavior between various expression binding contexts.\n *\n * In child expressions, `undefined`, `null`, `''`, and `nothing` all behave the\n * same and render no nodes. In attribute expressions, `nothing` _removes_ the\n * attribute, while `undefined` and `null` will render an empty string. In\n * property expressions `nothing` becomes `undefined`.\n */\n\nexport const nothing = Symbol.for('lit-nothing');\n/**\n * The cache of prepared templates, keyed by the tagged TemplateStringsArray\n * and _not_ accounting for the specific template tag used. This means that\n * template tags cannot be dynamic - the must statically be one of html, svg,\n * or attr. This restriction simplifies the cache lookup, which is on the hot\n * path for rendering.\n */\n\nconst templateCache = new WeakMap();\n/**\n * Renders a value, usually a lit-html TemplateResult, to the container.\n *\n * This example renders the text \"Hello, Zoe!\" inside a paragraph tag, appending\n * it to the container `document.body`.\n *\n * ```js\n * import {html, render} from 'lit';\n *\n * const name = \"Zoe\";\n * render(html`<p>Hello, ${name}!</p>`, document.body);\n * ```\n *\n * @param value Any [renderable\n *   value](https://lit.dev/docs/templates/expressions/#child-expressions),\n *   typically a {@linkcode TemplateResult} created by evaluating a template tag\n *   like {@linkcode html} or {@linkcode svg}.\n * @param container A DOM container to render to. The first render will append\n *   the rendered value to the container, and subsequent renders will\n *   efficiently update the rendered value if the same result type was\n *   previously rendered there.\n * @param options See {@linkcode RenderOptions} for options documentation.\n * @see\n * {@link https://lit.dev/docs/libraries/standalone-templates/#rendering-lit-html-templates| Rendering Lit HTML Templates}\n */\n\nexport const render = (value, container, options) => {\n  var _a, _b;\n\n  if (DEV_MODE && container == null) {\n    // Give a clearer error message than\n    //     Uncaught TypeError: Cannot read properties of null (reading\n    //     '_$litPart$')\n    // which reads like an internal Lit error.\n    throw new TypeError(`The container to render into may not be ${container}`);\n  }\n\n  const renderId = DEV_MODE ? debugLogRenderId++ : 0;\n  const partOwnerNode = (_a = options === null || options === void 0 ? void 0 : options.renderBefore) !== null && _a !== void 0 ? _a : container; // This property needs to remain unminified.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  let part = partOwnerNode['_$litPart$'];\n  debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({\n    kind: 'begin render',\n    id: renderId,\n    value,\n    container,\n    options,\n    part\n  });\n\n  if (part === undefined) {\n    const endNode = (_b = options === null || options === void 0 ? void 0 : options.renderBefore) !== null && _b !== void 0 ? _b : null; // This property needs to remain unminified.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    partOwnerNode['_$litPart$'] = part = new ChildPart(container.insertBefore(createMarker(), endNode), endNode, undefined, options !== null && options !== void 0 ? options : {});\n  }\n\n  part._$setValue(value);\n\n  debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({\n    kind: 'end render',\n    id: renderId,\n    value,\n    container,\n    options,\n    part\n  });\n  return part;\n};\n\nif (ENABLE_EXTRA_SECURITY_HOOKS) {\n  render.setSanitizer = setSanitizer;\n  render.createSanitizer = createSanitizer;\n\n  if (DEV_MODE) {\n    render._testOnlyClearSanitizerFactoryDoNotCallOrElse = _testOnlyClearSanitizerFactoryDoNotCallOrElse;\n  }\n}\n\nconst walker = d.createTreeWalker(d, 129\n/* NodeFilter.SHOW_{ELEMENT|COMMENT} */\n, null, false);\nlet sanitizerFactoryInternal = noopSanitizer;\n/**\n * Returns an HTML string for the given TemplateStringsArray and result type\n * (HTML or SVG), along with the case-sensitive bound attribute names in\n * template order. The HTML contains comment comment markers denoting the\n * `ChildPart`s and suffixes on bound attributes denoting the `AttributeParts`.\n *\n * @param strings template strings array\n * @param type HTML or SVG\n * @return Array containing `[html, attrNames]` (array returned for terseness,\n *     to avoid object fields since this code is shared with non-minified SSR\n *     code)\n */\n\nconst getTemplateHtml = (strings, type) => {\n  // Insert makers into the template HTML to represent the position of\n  // bindings. The following code scans the template strings to determine the\n  // syntactic position of the bindings. They can be in text position, where\n  // we insert an HTML comment, attribute value position, where we insert a\n  // sentinel string and re-write the attribute name, or inside a tag where\n  // we insert the sentinel string.\n  const l = strings.length - 1; // Stores the case-sensitive bound attribute names in the order of their\n  // parts. ElementParts are also reflected in this array as undefined\n  // rather than a string, to disambiguate from attribute bindings.\n\n  const attrNames = [];\n  let html = type === SVG_RESULT ? '<svg>' : ''; // When we're inside a raw text tag (not it's text content), the regex\n  // will still be tagRegex so we can find attributes, but will switch to\n  // this regex when the tag ends.\n\n  let rawTextEndRegex; // The current parsing state, represented as a reference to one of the\n  // regexes\n\n  let regex = textEndRegex;\n\n  for (let i = 0; i < l; i++) {\n    const s = strings[i]; // The index of the end of the last attribute name. When this is\n    // positive at end of a string, it means we're in an attribute value\n    // position and need to rewrite the attribute name.\n    // We also use a special value of -2 to indicate that we encountered\n    // the end of a string in attribute name position.\n\n    let attrNameEndIndex = -1;\n    let attrName;\n    let lastIndex = 0;\n    let match; // The conditions in this loop handle the current parse state, and the\n    // assignments to the `regex` variable are the state transitions.\n\n    while (lastIndex < s.length) {\n      // Make sure we start searching from where we previously left off\n      regex.lastIndex = lastIndex;\n      match = regex.exec(s);\n\n      if (match === null) {\n        break;\n      }\n\n      lastIndex = regex.lastIndex;\n\n      if (regex === textEndRegex) {\n        if (match[COMMENT_START] === '!--') {\n          regex = commentEndRegex;\n        } else if (match[COMMENT_START] !== undefined) {\n          // We started a weird comment, like </{\n          regex = comment2EndRegex;\n        } else if (match[TAG_NAME] !== undefined) {\n          if (rawTextElement.test(match[TAG_NAME])) {\n            // Record if we encounter a raw-text element. We'll switch to\n            // this regex at the end of the tag.\n            rawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, 'g');\n          }\n\n          regex = tagEndRegex;\n        } else if (match[DYNAMIC_TAG_NAME] !== undefined) {\n          if (DEV_MODE) {\n            throw new Error('Bindings in tag names are not supported. Please use static templates instead. ' + 'See https://lit.dev/docs/templates/expressions/#static-expressions');\n          }\n\n          regex = tagEndRegex;\n        }\n      } else if (regex === tagEndRegex) {\n        if (match[ENTIRE_MATCH] === '>') {\n          // End of a tag. If we had started a raw-text element, use that\n          // regex\n          regex = rawTextEndRegex !== null && rawTextEndRegex !== void 0 ? rawTextEndRegex : textEndRegex; // We may be ending an unquoted attribute value, so make sure we\n          // clear any pending attrNameEndIndex\n\n          attrNameEndIndex = -1;\n        } else if (match[ATTRIBUTE_NAME] === undefined) {\n          // Attribute name position\n          attrNameEndIndex = -2;\n        } else {\n          attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;\n          attrName = match[ATTRIBUTE_NAME];\n          regex = match[QUOTE_CHAR] === undefined ? tagEndRegex : match[QUOTE_CHAR] === '\"' ? doubleQuoteAttrEndRegex : singleQuoteAttrEndRegex;\n        }\n      } else if (regex === doubleQuoteAttrEndRegex || regex === singleQuoteAttrEndRegex) {\n        regex = tagEndRegex;\n      } else if (regex === commentEndRegex || regex === comment2EndRegex) {\n        regex = textEndRegex;\n      } else {\n        // Not one of the five state regexes, so it must be the dynamically\n        // created raw text regex and we're at the close of that element.\n        regex = tagEndRegex;\n        rawTextEndRegex = undefined;\n      }\n    }\n\n    if (DEV_MODE) {\n      // If we have a attrNameEndIndex, which indicates that we should\n      // rewrite the attribute name, assert that we're in a valid attribute\n      // position - either in a tag, or a quoted attribute value.\n      console.assert(attrNameEndIndex === -1 || regex === tagEndRegex || regex === singleQuoteAttrEndRegex || regex === doubleQuoteAttrEndRegex, 'unexpected parse state B');\n    } // We have four cases:\n    //  1. We're in text position, and not in a raw text element\n    //     (regex === textEndRegex): insert a comment marker.\n    //  2. We have a non-negative attrNameEndIndex which means we need to\n    //     rewrite the attribute name to add a bound attribute suffix.\n    //  3. We're at the non-first binding in a multi-binding attribute, use a\n    //     plain marker.\n    //  4. We're somewhere else inside the tag. If we're in attribute name\n    //     position (attrNameEndIndex === -2), add a sequential suffix to\n    //     generate a unique attribute name.\n    // Detect a binding next to self-closing tag end and insert a space to\n    // separate the marker from the tag end:\n\n\n    const end = regex === tagEndRegex && strings[i + 1].startsWith('/>') ? ' ' : '';\n    html += regex === textEndRegex ? s + nodeMarker : attrNameEndIndex >= 0 ? (attrNames.push(attrName), s.slice(0, attrNameEndIndex) + boundAttributeSuffix + s.slice(attrNameEndIndex)) + marker + end : s + marker + (attrNameEndIndex === -2 ? (attrNames.push(undefined), i) : end);\n  }\n\n  const htmlResult = html + (strings[l] || '<?>') + (type === SVG_RESULT ? '</svg>' : ''); // A security check to prevent spoofing of Lit template results.\n  // In the future, we may be able to replace this with Array.isTemplateObject,\n  // though we might need to make that check inside of the html and svg\n  // functions, because precompiled templates don't come in as\n  // TemplateStringArray objects.\n\n  if (!Array.isArray(strings) || !strings.hasOwnProperty('raw')) {\n    let message = 'invalid template strings array';\n\n    if (DEV_MODE) {\n      message = `\n          Internal Error: expected template strings to be an array\n          with a 'raw' field. Faking a template strings array by\n          calling html or svg like an ordinary function is effectively\n          the same as calling unsafeHtml and can lead to major security\n          issues, e.g. opening your code up to XSS attacks.\n\n          If you're using the html or svg tagged template functions normally\n          and and still seeing this error, please file a bug at\n          https://github.com/lit/lit/issues/new?template=bug_report.md\n          and include information about your build tooling, if any.\n        `.trim().replace(/\\n */g, '\\n');\n    }\n\n    throw new Error(message);\n  } // Returned as an array for terseness\n\n\n  return [policy !== undefined ? policy.createHTML(htmlResult) : htmlResult, attrNames];\n};\n\nclass Template {\n  constructor( // This property needs to remain unminified.\n  _ref, options) {\n    let {\n      strings,\n      ['_$litType$']: type\n    } = _ref;\n\n    /** @internal */\n    this.parts = [];\n    let node;\n    let nodeIndex = 0;\n    let attrNameIndex = 0;\n    const partCount = strings.length - 1;\n    const parts = this.parts; // Create template element\n\n    const [html, attrNames] = getTemplateHtml(strings, type);\n    this.el = Template.createElement(html, options);\n    walker.currentNode = this.el.content; // Reparent SVG nodes into template root\n\n    if (type === SVG_RESULT) {\n      const content = this.el.content;\n      const svgElement = content.firstChild;\n      svgElement.remove();\n      content.append(...svgElement.childNodes);\n    } // Walk the template to find binding markers and create TemplateParts\n\n\n    while ((node = walker.nextNode()) !== null && parts.length < partCount) {\n      if (node.nodeType === 1) {\n        if (DEV_MODE) {\n          const tag = node.localName; // Warn if `textarea` includes an expression and throw if `template`\n          // does since these are not supported. We do this by checking\n          // innerHTML for anything that looks like a marker. This catches\n          // cases like bindings in textarea there markers turn into text nodes.\n\n          if (/^(?:textarea|template)$/i.test(tag) && node.innerHTML.includes(marker)) {\n            const m = `Expressions are not supported inside \\`${tag}\\` ` + `elements. See https://lit.dev/msg/expression-in-${tag} for more ` + `information.`;\n\n            if (tag === 'template') {\n              throw new Error(m);\n            } else issueWarning('', m);\n          }\n        } // TODO (justinfagnani): for attempted dynamic tag names, we don't\n        // increment the bindingIndex, and it'll be off by 1 in the element\n        // and off by two after it.\n\n\n        if (node.hasAttributes()) {\n          // We defer removing bound attributes because on IE we might not be\n          // iterating attributes in their template order, and would sometimes\n          // remove an attribute that we still need to create a part for.\n          const attrsToRemove = [];\n\n          for (const name of node.getAttributeNames()) {\n            // `name` is the name of the attribute we're iterating over, but not\n            // _neccessarily_ the name of the attribute we will create a part\n            // for. They can be different in browsers that don't iterate on\n            // attributes in source order. In that case the attrNames array\n            // contains the attribute name we'll process next. We only need the\n            // attribute name here to know if we should process a bound attribute\n            // on this element.\n            if (name.endsWith(boundAttributeSuffix) || name.startsWith(marker)) {\n              const realName = attrNames[attrNameIndex++];\n              attrsToRemove.push(name);\n\n              if (realName !== undefined) {\n                // Lowercase for case-sensitive SVG attributes like viewBox\n                const value = node.getAttribute(realName.toLowerCase() + boundAttributeSuffix);\n                const statics = value.split(marker);\n                const m = /([.?@])?(.*)/.exec(realName);\n                parts.push({\n                  type: ATTRIBUTE_PART,\n                  index: nodeIndex,\n                  name: m[2],\n                  strings: statics,\n                  ctor: m[1] === '.' ? PropertyPart : m[1] === '?' ? BooleanAttributePart : m[1] === '@' ? EventPart : AttributePart\n                });\n              } else {\n                parts.push({\n                  type: ELEMENT_PART,\n                  index: nodeIndex\n                });\n              }\n            }\n          }\n\n          for (const name of attrsToRemove) {\n            node.removeAttribute(name);\n          }\n        } // TODO (justinfagnani): benchmark the regex against testing for each\n        // of the 3 raw text element names.\n\n\n        if (rawTextElement.test(node.tagName)) {\n          // For raw text elements we need to split the text content on\n          // markers, create a Text node for each segment, and create\n          // a TemplatePart for each marker.\n          const strings = node.textContent.split(marker);\n          const lastIndex = strings.length - 1;\n\n          if (lastIndex > 0) {\n            node.textContent = trustedTypes ? trustedTypes.emptyScript : ''; // Generate a new text node for each literal section\n            // These nodes are also used as the markers for node parts\n            // We can't use empty text nodes as markers because they're\n            // normalized when cloning in IE (could simplify when\n            // IE is no longer supported)\n\n            for (let i = 0; i < lastIndex; i++) {\n              node.append(strings[i], createMarker()); // Walk past the marker node we just added\n\n              walker.nextNode();\n              parts.push({\n                type: CHILD_PART,\n                index: ++nodeIndex\n              });\n            } // Note because this marker is added after the walker's current\n            // node, it will be walked to in the outer loop (and ignored), so\n            // we don't need to adjust nodeIndex here\n\n\n            node.append(strings[lastIndex], createMarker());\n          }\n        }\n      } else if (node.nodeType === 8) {\n        const data = node.data;\n\n        if (data === markerMatch) {\n          parts.push({\n            type: CHILD_PART,\n            index: nodeIndex\n          });\n        } else {\n          let i = -1;\n\n          while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            parts.push({\n              type: COMMENT_PART,\n              index: nodeIndex\n            }); // Move to the end of the match\n\n            i += marker.length - 1;\n          }\n        }\n      }\n\n      nodeIndex++;\n    }\n\n    debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({\n      kind: 'template prep',\n      template: this,\n      clonableTemplate: this.el,\n      parts: this.parts,\n      strings\n    });\n  } // Overridden via `litHtmlPolyfillSupport` to provide platform support.\n\n  /** @nocollapse */\n\n\n  static createElement(html, _options) {\n    const el = d.createElement('template');\n    el.innerHTML = html;\n    return el;\n  }\n\n}\n\nfunction resolveDirective(part, value) {\n  let parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : part;\n  let attributeIndex = arguments.length > 3 ? arguments[3] : undefined;\n\n  var _a, _b, _c;\n\n  var _d; // Bail early if the value is explicitly noChange. Note, this means any\n  // nested directive is still attached and is not run.\n\n\n  if (value === noChange) {\n    return value;\n  }\n\n  let currentDirective = attributeIndex !== undefined ? (_a = parent.__directives) === null || _a === void 0 ? void 0 : _a[attributeIndex] : parent.__directive;\n  const nextDirectiveConstructor = isPrimitive(value) ? undefined : // This property needs to remain unminified.\n  value['_$litDirective$'];\n\n  if ((currentDirective === null || currentDirective === void 0 ? void 0 : currentDirective.constructor) !== nextDirectiveConstructor) {\n    // This property needs to remain unminified.\n    (_b = currentDirective === null || currentDirective === void 0 ? void 0 : currentDirective['_$notifyDirectiveConnectionChanged']) === null || _b === void 0 ? void 0 : _b.call(currentDirective, false);\n\n    if (nextDirectiveConstructor === undefined) {\n      currentDirective = undefined;\n    } else {\n      currentDirective = new nextDirectiveConstructor(part);\n\n      currentDirective._$initialize(part, parent, attributeIndex);\n    }\n\n    if (attributeIndex !== undefined) {\n      ((_c = (_d = parent).__directives) !== null && _c !== void 0 ? _c : _d.__directives = [])[attributeIndex] = currentDirective;\n    } else {\n      parent.__directive = currentDirective;\n    }\n  }\n\n  if (currentDirective !== undefined) {\n    value = resolveDirective(part, currentDirective._$resolve(part, value.values), currentDirective, attributeIndex);\n  }\n\n  return value;\n}\n/**\n * An updateable instance of a Template. Holds references to the Parts used to\n * update the template instance.\n */\n\n\nclass TemplateInstance {\n  constructor(template, parent) {\n    /** @internal */\n    this._parts = [];\n    /** @internal */\n\n    this._$disconnectableChildren = undefined;\n    this._$template = template;\n    this._$parent = parent;\n  } // Called by ChildPart parentNode getter\n\n\n  get parentNode() {\n    return this._$parent.parentNode;\n  } // See comment in Disconnectable interface for why this is a getter\n\n\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  } // This method is separate from the constructor because we need to return a\n  // DocumentFragment and we don't want to hold onto it with an instance field.\n\n\n  _clone(options) {\n    var _a;\n\n    const {\n      el: {\n        content\n      },\n      parts: parts\n    } = this._$template;\n    const fragment = ((_a = options === null || options === void 0 ? void 0 : options.creationScope) !== null && _a !== void 0 ? _a : d).importNode(content, true);\n    walker.currentNode = fragment;\n    let node = walker.nextNode();\n    let nodeIndex = 0;\n    let partIndex = 0;\n    let templatePart = parts[0];\n\n    while (templatePart !== undefined) {\n      if (nodeIndex === templatePart.index) {\n        let part;\n\n        if (templatePart.type === CHILD_PART) {\n          part = new ChildPart(node, node.nextSibling, this, options);\n        } else if (templatePart.type === ATTRIBUTE_PART) {\n          part = new templatePart.ctor(node, templatePart.name, templatePart.strings, this, options);\n        } else if (templatePart.type === ELEMENT_PART) {\n          part = new ElementPart(node, this, options);\n        }\n\n        this._parts.push(part);\n\n        templatePart = parts[++partIndex];\n      }\n\n      if (nodeIndex !== (templatePart === null || templatePart === void 0 ? void 0 : templatePart.index)) {\n        node = walker.nextNode();\n        nodeIndex++;\n      }\n    }\n\n    return fragment;\n  }\n\n  _update(values) {\n    let i = 0;\n\n    for (const part of this._parts) {\n      if (part !== undefined) {\n        debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({\n          kind: 'set part',\n          part,\n          value: values[i],\n          valueIndex: i,\n          values,\n          templateInstance: this\n        });\n\n        if (part.strings !== undefined) {\n          part._$setValue(values, part, i); // The number of values the part consumes is part.strings.length - 1\n          // since values are in between template spans. We increment i by 1\n          // later in the loop, so increment it by part.strings.length - 2 here\n\n\n          i += part.strings.length - 2;\n        } else {\n          part._$setValue(values[i]);\n        }\n      }\n\n      i++;\n    }\n  }\n\n}\n\nclass ChildPart {\n  constructor(startNode, endNode, parent, options) {\n    var _a;\n\n    this.type = CHILD_PART;\n    this._$committedValue = nothing; // The following fields will be patched onto ChildParts when required by\n    // AsyncDirective\n\n    /** @internal */\n\n    this._$disconnectableChildren = undefined;\n    this._$startNode = startNode;\n    this._$endNode = endNode;\n    this._$parent = parent;\n    this.options = options; // Note __isConnected is only ever accessed on RootParts (i.e. when there is\n    // no _$parent); the value on a non-root-part is \"don't care\", but checking\n    // for parent would be more code\n\n    this.__isConnected = (_a = options === null || options === void 0 ? void 0 : options.isConnected) !== null && _a !== void 0 ? _a : true;\n\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      // Explicitly initialize for consistent class shape.\n      this._textSanitizer = undefined;\n    }\n  } // See comment in Disconnectable interface for why this is a getter\n\n\n  get _$isConnected() {\n    var _a, _b; // ChildParts that are not at the root should always be created with a\n    // parent; only RootChildNode's won't, so they return the local isConnected\n    // state\n\n\n    return (_b = (_a = this._$parent) === null || _a === void 0 ? void 0 : _a._$isConnected) !== null && _b !== void 0 ? _b : this.__isConnected;\n  }\n  /**\n   * The parent node into which the part renders its content.\n   *\n   * A ChildPart's content consists of a range of adjacent child nodes of\n   * `.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n   * `.endNode`).\n   *\n   * - If both `.startNode` and `.endNode` are non-null, then the part's content\n   * consists of all siblings between `.startNode` and `.endNode`, exclusively.\n   *\n   * - If `.startNode` is non-null but `.endNode` is null, then the part's\n   * content consists of all siblings following `.startNode`, up to and\n   * including the last child of `.parentNode`. If `.endNode` is non-null, then\n   * `.startNode` will always be non-null.\n   *\n   * - If both `.endNode` and `.startNode` are null, then the part's content\n   * consists of all child nodes of `.parentNode`.\n   */\n\n\n  get parentNode() {\n    let parentNode = wrap(this._$startNode).parentNode;\n    const parent = this._$parent;\n\n    if (parent !== undefined && parentNode.nodeType === 11\n    /* Node.DOCUMENT_FRAGMENT */\n    ) {\n      // If the parentNode is a DocumentFragment, it may be because the DOM is\n      // still in the cloned fragment during initial render; if so, get the real\n      // parentNode the part will be committed into by asking the parent.\n      parentNode = parent.parentNode;\n    }\n\n    return parentNode;\n  }\n  /**\n   * The part's leading marker node, if any. See `.parentNode` for more\n   * information.\n   */\n\n\n  get startNode() {\n    return this._$startNode;\n  }\n  /**\n   * The part's trailing marker node, if any. See `.parentNode` for more\n   * information.\n   */\n\n\n  get endNode() {\n    return this._$endNode;\n  }\n\n  _$setValue(value) {\n    let directiveParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n\n    if (DEV_MODE && this.parentNode === null) {\n      throw new Error(`This \\`ChildPart\\` has no \\`parentNode\\` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's \\`innerHTML\\` or \\`textContent\\` can do this.`);\n    }\n\n    value = resolveDirective(this, value, directiveParent);\n\n    if (isPrimitive(value)) {\n      // Non-rendering child values. It's important that these do not render\n      // empty text nodes to avoid issues with preventing default <slot>\n      // fallback content.\n      if (value === nothing || value == null || value === '') {\n        if (this._$committedValue !== nothing) {\n          debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({\n            kind: 'commit nothing to child',\n            start: this._$startNode,\n            end: this._$endNode,\n            parent: this._$parent,\n            options: this.options\n          });\n\n          this._$clear();\n        }\n\n        this._$committedValue = nothing;\n      } else if (value !== this._$committedValue && value !== noChange) {\n        this._commitText(value);\n      } // This property needs to remain unminified.\n\n    } else if (value['_$litType$'] !== undefined) {\n      this._commitTemplateResult(value);\n    } else if (value.nodeType !== undefined) {\n      this._commitNode(value);\n    } else if (isIterable(value)) {\n      this._commitIterable(value);\n    } else {\n      // Fallback, will render the string representation\n      this._commitText(value);\n    }\n  }\n\n  _insert(node) {\n    let ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this._$endNode;\n    return wrap(wrap(this._$startNode).parentNode).insertBefore(node, ref);\n  }\n\n  _commitNode(value) {\n    var _a;\n\n    if (this._$committedValue !== value) {\n      this._$clear();\n\n      if (ENABLE_EXTRA_SECURITY_HOOKS && sanitizerFactoryInternal !== noopSanitizer) {\n        const parentNodeName = (_a = this._$startNode.parentNode) === null || _a === void 0 ? void 0 : _a.nodeName;\n\n        if (parentNodeName === 'STYLE' || parentNodeName === 'SCRIPT') {\n          let message = 'Forbidden';\n\n          if (DEV_MODE) {\n            if (parentNodeName === 'STYLE') {\n              message = `Lit does not support binding inside style nodes. ` + `This is a security risk, as style injection attacks can ` + `exfiltrate data and spoof UIs. ` + `Consider instead using css\\`...\\` literals ` + `to compose styles, and make do dynamic styling with ` + `css custom properties, ::parts, <slot>s, ` + `and by mutating the DOM rather than stylesheets.`;\n            } else {\n              message = `Lit does not support binding inside script nodes. ` + `This is a security risk, as it could allow arbitrary ` + `code execution.`;\n            }\n          }\n\n          throw new Error(message);\n        }\n      }\n\n      debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({\n        kind: 'commit node',\n        start: this._$startNode,\n        parent: this._$parent,\n        value: value,\n        options: this.options\n      });\n      this._$committedValue = this._insert(value);\n    }\n  }\n\n  _commitText(value) {\n    // If the committed value is a primitive it means we called _commitText on\n    // the previous render, and we know that this._$startNode.nextSibling is a\n    // Text node. We can now just replace the text content (.data) of the node.\n    if (this._$committedValue !== nothing && isPrimitive(this._$committedValue)) {\n      const node = wrap(this._$startNode).nextSibling;\n\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(node, 'data', 'property');\n        }\n\n        value = this._textSanitizer(value);\n      }\n\n      debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({\n        kind: 'commit text',\n        node,\n        value,\n        options: this.options\n      });\n      node.data = value;\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        const textNode = document.createTextNode('');\n\n        this._commitNode(textNode); // When setting text content, for security purposes it matters a lot\n        // what the parent is. For example, <style> and <script> need to be\n        // handled with care, while <span> does not. So first we need to put a\n        // text node into the document, then we can sanitize its content.\n\n\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(textNode, 'data', 'property');\n        }\n\n        value = this._textSanitizer(value);\n        debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({\n          kind: 'commit text',\n          node: textNode,\n          value,\n          options: this.options\n        });\n        textNode.data = value;\n      } else {\n        this._commitNode(d.createTextNode(value));\n\n        debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({\n          kind: 'commit text',\n          node: wrap(this._$startNode).nextSibling,\n          value,\n          options: this.options\n        });\n      }\n    }\n\n    this._$committedValue = value;\n  }\n\n  _commitTemplateResult(result) {\n    var _a; // This property needs to remain unminified.\n\n\n    const {\n      values,\n      ['_$litType$']: type\n    } = result; // If $litType$ is a number, result is a plain TemplateResult and we get\n    // the template from the template cache. If not, result is a\n    // CompiledTemplateResult and _$litType$ is a CompiledTemplate and we need\n    // to create the <template> element the first time we see it.\n\n    const template = typeof type === 'number' ? this._$getTemplate(result) : (type.el === undefined && (type.el = Template.createElement(type.h, this.options)), type);\n\n    if (((_a = this._$committedValue) === null || _a === void 0 ? void 0 : _a._$template) === template) {\n      debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({\n        kind: 'template updating',\n        template,\n        instance: this._$committedValue,\n        parts: this._$committedValue._parts,\n        options: this.options,\n        values\n      });\n\n      this._$committedValue._update(values);\n    } else {\n      const instance = new TemplateInstance(template, this);\n\n      const fragment = instance._clone(this.options);\n\n      debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({\n        kind: 'template instantiated',\n        template,\n        instance,\n        parts: instance._parts,\n        options: this.options,\n        fragment,\n        values\n      });\n\n      instance._update(values);\n\n      debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({\n        kind: 'template instantiated and updated',\n        template,\n        instance,\n        parts: instance._parts,\n        options: this.options,\n        fragment,\n        values\n      });\n\n      this._commitNode(fragment);\n\n      this._$committedValue = instance;\n    }\n  } // Overridden via `litHtmlPolyfillSupport` to provide platform support.\n\n  /** @internal */\n\n\n  _$getTemplate(result) {\n    let template = templateCache.get(result.strings);\n\n    if (template === undefined) {\n      templateCache.set(result.strings, template = new Template(result));\n    }\n\n    return template;\n  }\n\n  _commitIterable(value) {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n    // If value is an array, then the previous render was of an\n    // iterable and value will contain the ChildParts from the previous\n    // render. If value is not an array, clear this part and make a new\n    // array for ChildParts.\n    if (!isArray(this._$committedValue)) {\n      this._$committedValue = [];\n\n      this._$clear();\n    } // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n\n\n    const itemParts = this._$committedValue;\n    let partIndex = 0;\n    let itemPart;\n\n    for (const item of value) {\n      if (partIndex === itemParts.length) {\n        // If no existing part, create a new one\n        // TODO (justinfagnani): test perf impact of always creating two parts\n        // instead of sharing parts between nodes\n        // https://github.com/lit/lit/issues/1266\n        itemParts.push(itemPart = new ChildPart(this._insert(createMarker()), this._insert(createMarker()), this, this.options));\n      } else {\n        // Reuse an existing part\n        itemPart = itemParts[partIndex];\n      }\n\n      itemPart._$setValue(item);\n\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // itemParts always have end nodes\n      this._$clear(itemPart && wrap(itemPart._$endNode).nextSibling, partIndex); // Truncate the parts array so _value reflects the current state\n\n\n      itemParts.length = partIndex;\n    }\n  }\n  /**\n   * Removes the nodes contained within this Part from the DOM.\n   *\n   * @param start Start node to clear from, for clearing a subset of the part's\n   *     DOM (used when truncating iterables)\n   * @param from  When `start` is specified, the index within the iterable from\n   *     which ChildParts are being removed, used for disconnecting directives in\n   *     those Parts.\n   *\n   * @internal\n   */\n\n\n  _$clear() {\n    let start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : wrap(this._$startNode).nextSibling;\n    let from = arguments.length > 1 ? arguments[1] : undefined;\n\n    var _a;\n\n    (_a = this._$notifyConnectionChanged) === null || _a === void 0 ? void 0 : _a.call(this, false, true, from);\n\n    while (start && start !== this._$endNode) {\n      const n = wrap(start).nextSibling;\n      wrap(start).remove();\n      start = n;\n    }\n  }\n  /**\n   * Implementation of RootPart's `isConnected`. Note that this metod\n   * should only be called on `RootPart`s (the `ChildPart` returned from a\n   * top-level `render()` call). It has no effect on non-root ChildParts.\n   * @param isConnected Whether to set\n   * @internal\n   */\n\n\n  setConnected(isConnected) {\n    var _a;\n\n    if (this._$parent === undefined) {\n      this.__isConnected = isConnected;\n      (_a = this._$notifyConnectionChanged) === null || _a === void 0 ? void 0 : _a.call(this, isConnected);\n    } else if (DEV_MODE) {\n      throw new Error('part.setConnected() may only be called on a ' + 'RootPart returned from render().');\n    }\n  }\n\n}\n\nclass AttributePart {\n  constructor(element, name, strings, parent, options) {\n    this.type = ATTRIBUTE_PART;\n    /** @internal */\n\n    this._$committedValue = nothing;\n    /** @internal */\n\n    this._$disconnectableChildren = undefined;\n    this.element = element;\n    this.name = name;\n    this._$parent = parent;\n    this.options = options;\n\n    if (strings.length > 2 || strings[0] !== '' || strings[1] !== '') {\n      this._$committedValue = new Array(strings.length - 1).fill(new String());\n      this.strings = strings;\n    } else {\n      this._$committedValue = nothing;\n    }\n\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      this._sanitizer = undefined;\n    }\n  }\n\n  get tagName() {\n    return this.element.tagName;\n  } // See comment in Disconnectable interface for why this is a getter\n\n\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n  /**\n   * Sets the value of this part by resolving the value from possibly multiple\n   * values and static strings and committing it to the DOM.\n   * If this part is single-valued, `this._strings` will be undefined, and the\n   * method will be called with a single value argument. If this part is\n   * multi-value, `this._strings` will be defined, and the method is called\n   * with the value array of the part's owning TemplateInstance, and an offset\n   * into the value array from which the values should be read.\n   * This method is overloaded this way to eliminate short-lived array slices\n   * of the template instance values, and allow a fast-path for single-valued\n   * parts.\n   *\n   * @param value The part value, or an array of values for multi-valued parts\n   * @param valueIndex the index to start reading values from. `undefined` for\n   *   single-valued parts\n   * @param noCommit causes the part to not commit its value to the DOM. Used\n   *   in hydration to prime attribute parts with their first-rendered value,\n   *   but not set the attribute, and in SSR to no-op the DOM operation and\n   *   capture the value for serialization.\n   *\n   * @internal\n   */\n\n\n  _$setValue(value) {\n    let directiveParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n    let valueIndex = arguments.length > 2 ? arguments[2] : undefined;\n    let noCommit = arguments.length > 3 ? arguments[3] : undefined;\n    const strings = this.strings; // Whether any of the values has changed, for dirty-checking\n\n    let change = false;\n\n    if (strings === undefined) {\n      // Single-value binding case\n      value = resolveDirective(this, value, directiveParent, 0);\n      change = !isPrimitive(value) || value !== this._$committedValue && value !== noChange;\n\n      if (change) {\n        this._$committedValue = value;\n      }\n    } else {\n      // Interpolation case\n      const values = value;\n      value = strings[0];\n      let i, v;\n\n      for (i = 0; i < strings.length - 1; i++) {\n        v = resolveDirective(this, values[valueIndex + i], directiveParent, i);\n\n        if (v === noChange) {\n          // If the user-provided value is `noChange`, use the previous value\n          v = this._$committedValue[i];\n        }\n\n        change || (change = !isPrimitive(v) || v !== this._$committedValue[i]);\n\n        if (v === nothing) {\n          value = nothing;\n        } else if (value !== nothing) {\n          value += (v !== null && v !== void 0 ? v : '') + strings[i + 1];\n        } // We always record each value, even if one is `nothing`, for future\n        // change detection.\n\n\n        this._$committedValue[i] = v;\n      }\n    }\n\n    if (change && !noCommit) {\n      this._commitValue(value);\n    }\n  }\n  /** @internal */\n\n\n  _commitValue(value) {\n    if (value === nothing) {\n      wrap(this.element).removeAttribute(this.name);\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._sanitizer === undefined) {\n          this._sanitizer = sanitizerFactoryInternal(this.element, this.name, 'attribute');\n        }\n\n        value = this._sanitizer(value !== null && value !== void 0 ? value : '');\n      }\n\n      debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({\n        kind: 'commit attribute',\n        element: this.element,\n        name: this.name,\n        value,\n        options: this.options\n      });\n      wrap(this.element).setAttribute(this.name, value !== null && value !== void 0 ? value : '');\n    }\n  }\n\n}\n\nclass PropertyPart extends AttributePart {\n  constructor() {\n    super(...arguments);\n    this.type = PROPERTY_PART;\n  }\n  /** @internal */\n\n\n  _commitValue(value) {\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      if (this._sanitizer === undefined) {\n        this._sanitizer = sanitizerFactoryInternal(this.element, this.name, 'property');\n      }\n\n      value = this._sanitizer(value);\n    }\n\n    debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({\n      kind: 'commit property',\n      element: this.element,\n      name: this.name,\n      value,\n      options: this.options\n    }); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n    this.element[this.name] = value === nothing ? undefined : value;\n  }\n\n} // Temporary workaround for https://crbug.com/993268\n// Currently, any attribute starting with \"on\" is considered to be a\n// TrustedScript source. Such boolean attributes must be set to the equivalent\n// trusted emptyScript value.\n\n\nconst emptyStringForBooleanAttribute = trustedTypes ? trustedTypes.emptyScript : '';\n\nclass BooleanAttributePart extends AttributePart {\n  constructor() {\n    super(...arguments);\n    this.type = BOOLEAN_ATTRIBUTE_PART;\n  }\n  /** @internal */\n\n\n  _commitValue(value) {\n    debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({\n      kind: 'commit boolean attribute',\n      element: this.element,\n      name: this.name,\n      value: !!(value && value !== nothing),\n      options: this.options\n    });\n\n    if (value && value !== nothing) {\n      wrap(this.element).setAttribute(this.name, emptyStringForBooleanAttribute);\n    } else {\n      wrap(this.element).removeAttribute(this.name);\n    }\n  }\n\n}\n\nclass EventPart extends AttributePart {\n  constructor(element, name, strings, parent, options) {\n    super(element, name, strings, parent, options);\n    this.type = EVENT_PART;\n\n    if (DEV_MODE && this.strings !== undefined) {\n      throw new Error(`A \\`<${element.localName}>\\` has a \\`@${name}=...\\` listener with ` + 'invalid content. Event listeners in templates must have exactly ' + 'one expression and no surrounding text.');\n    }\n  } // EventPart does not use the base _$setValue/_resolveValue implementation\n  // since the dirty checking is more complex\n\n  /** @internal */\n\n\n  _$setValue(newListener) {\n    let directiveParent = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this;\n\n    var _a;\n\n    newListener = (_a = resolveDirective(this, newListener, directiveParent, 0)) !== null && _a !== void 0 ? _a : nothing;\n\n    if (newListener === noChange) {\n      return;\n    }\n\n    const oldListener = this._$committedValue; // If the new value is nothing or any options change we have to remove the\n    // part as a listener.\n\n    const shouldRemoveListener = newListener === nothing && oldListener !== nothing || newListener.capture !== oldListener.capture || newListener.once !== oldListener.once || newListener.passive !== oldListener.passive; // If the new value is not nothing and we removed the listener, we have\n    // to add the part as a listener.\n\n    const shouldAddListener = newListener !== nothing && (oldListener === nothing || shouldRemoveListener);\n    debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({\n      kind: 'commit event listener',\n      element: this.element,\n      name: this.name,\n      value: newListener,\n      options: this.options,\n      removeListener: shouldRemoveListener,\n      addListener: shouldAddListener,\n      oldListener\n    });\n\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(this.name, this, oldListener);\n    }\n\n    if (shouldAddListener) {\n      // Beware: IE11 and Chrome 41 don't like using the listener as the\n      // options object. Figure out how to deal w/ this in IE11 - maybe\n      // patch addEventListener?\n      this.element.addEventListener(this.name, this, newListener);\n    }\n\n    this._$committedValue = newListener;\n  }\n\n  handleEvent(event) {\n    var _a, _b;\n\n    if (typeof this._$committedValue === 'function') {\n      this._$committedValue.call((_b = (_a = this.options) === null || _a === void 0 ? void 0 : _a.host) !== null && _b !== void 0 ? _b : this.element, event);\n    } else {\n      this._$committedValue.handleEvent(event);\n    }\n  }\n\n}\n\nclass ElementPart {\n  constructor(element, parent, options) {\n    this.element = element;\n    this.type = ELEMENT_PART;\n    /** @internal */\n\n    this._$disconnectableChildren = undefined;\n    this._$parent = parent;\n    this.options = options;\n  } // See comment in Disconnectable interface for why this is a getter\n\n\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  _$setValue(value) {\n    debugLogEvent === null || debugLogEvent === void 0 ? void 0 : debugLogEvent({\n      kind: 'commit to element binding',\n      element: this.element,\n      value,\n      options: this.options\n    });\n    resolveDirective(this, value);\n  }\n\n}\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports  mangled in the\n * client side code, we export a _$LH object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-element, which re-exports all of lit-html.\n *\n * @private\n */\n\n\nexport const _$LH = {\n  // Used in lit-ssr\n  _boundAttributeSuffix: boundAttributeSuffix,\n  _marker: marker,\n  _markerMatch: markerMatch,\n  _HTML_RESULT: HTML_RESULT,\n  _getTemplateHtml: getTemplateHtml,\n  // Used in hydrate\n  _TemplateInstance: TemplateInstance,\n  _isIterable: isIterable,\n  _resolveDirective: resolveDirective,\n  // Used in tests and private-ssr-support\n  _ChildPart: ChildPart,\n  _AttributePart: AttributePart,\n  _BooleanAttributePart: BooleanAttributePart,\n  _EventPart: EventPart,\n  _PropertyPart: PropertyPart,\n  _ElementPart: ElementPart\n}; // Apply polyfills if available\n\nconst polyfillSupport = DEV_MODE ? window.litHtmlPolyfillSupportDevMode : window.litHtmlPolyfillSupport;\npolyfillSupport === null || polyfillSupport === void 0 ? void 0 : polyfillSupport(Template, ChildPart); // IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n\n((_d = globalThis.litHtmlVersions) !== null && _d !== void 0 ? _d : globalThis.litHtmlVersions = []).push('2.2.7');\n\nif (DEV_MODE && globalThis.litHtmlVersions.length > 1) {\n  issueWarning('multiple-versions', `Multiple versions of Lit loaded. ` + `Loading multiple versions is not recommended.`);\n}","map":{"version":3,"mappings":"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","names":["DEV_MODE","ENABLE_EXTRA_SECURITY_HOOKS","ENABLE_SHADYDOM_NOPATCH","debugLogEvent","event","shouldEmit","window","emitLitDebugLogEvents","dispatchEvent","CustomEvent","detail","undefined","debugLogRenderId","issueWarning","litIssuedWarnings","_a","Set","code","warning","globalThis","has","console","warn","add","wrap","ShadyDOM","_b","inUse","_c","noPatch","node","trustedTypes","policy","createPolicy","createHTML","s","identityFunction","value","noopSanitizer","_node","_name","_type","setSanitizer","newSanitizer","sanitizerFactoryInternal","Error","_testOnlyClearSanitizerFactoryDoNotCallOrElse","createSanitizer","name","type","boundAttributeSuffix","marker","String","Math","random","slice","markerMatch","nodeMarker","d","document","createMarker","v","createComment","isPrimitive","isArray","Array","isIterable","Symbol","iterator","SPACE_CHAR","ATTR_VALUE_CHAR","NAME_CHAR","textEndRegex","COMMENT_START","TAG_NAME","DYNAMIC_TAG_NAME","commentEndRegex","comment2EndRegex","tagEndRegex","RegExp","ENTIRE_MATCH","ATTRIBUTE_NAME","SPACES_AND_EQUALS","QUOTE_CHAR","singleQuoteAttrEndRegex","doubleQuoteAttrEndRegex","rawTextElement","HTML_RESULT","SVG_RESULT","ATTRIBUTE_PART","CHILD_PART","PROPERTY_PART","BOOLEAN_ATTRIBUTE_PART","EVENT_PART","ELEMENT_PART","COMMENT_PART","tag","strings","some","values","html","svg","noChange","for","nothing","templateCache","WeakMap","render","container","options","TypeError","renderId","partOwnerNode","renderBefore","part","kind","id","endNode","ChildPart","insertBefore","_$setValue","walker","createTreeWalker","getTemplateHtml","l","length","attrNames","rawTextEndRegex","regex","i","attrNameEndIndex","attrName","lastIndex","match","exec","test","assert","end","startsWith","push","htmlResult","hasOwnProperty","message","trim","replace","Template","constructor","nodeIndex","attrNameIndex","partCount","parts","el","createElement","currentNode","content","svgElement","firstChild","remove","append","childNodes","nextNode","nodeType","localName","innerHTML","includes","m","hasAttributes","attrsToRemove","getAttributeNames","endsWith","realName","getAttribute","toLowerCase","statics","split","index","ctor","PropertyPart","BooleanAttributePart","EventPart","AttributePart","removeAttribute","tagName","textContent","emptyScript","data","indexOf","template","clonableTemplate","_options","resolveDirective","parent","attributeIndex","currentDirective","__directives","__directive","nextDirectiveConstructor","_$initialize","_d","_$resolve","TemplateInstance","_$template","_$parent","parentNode","_$isConnected","_clone","fragment","creationScope","importNode","partIndex","templatePart","nextSibling","ElementPart","_parts","_update","valueIndex","templateInstance","startNode","_$startNode","_$endNode","__isConnected","isConnected","_textSanitizer","directiveParent","_$committedValue","start","_$clear","_commitText","_commitTemplateResult","_commitNode","_commitIterable","_insert","ref","parentNodeName","nodeName","textNode","createTextNode","result","_$getTemplate","h","instance","get","set","itemParts","itemPart","item","from","_$notifyConnectionChanged","n","setConnected","element","fill","_sanitizer","noCommit","change","_commitValue","setAttribute","emptyStringForBooleanAttribute","newListener","oldListener","shouldRemoveListener","capture","once","passive","shouldAddListener","removeListener","addListener","removeEventListener","addEventListener","handleEvent","call","host","_$LH","_boundAttributeSuffix","_marker","_markerMatch","_HTML_RESULT","_getTemplateHtml","_TemplateInstance","_isIterable","_resolveDirective","_ChildPart","_AttributePart","_BooleanAttributePart","_EventPart","_PropertyPart","_ElementPart","polyfillSupport","litHtmlPolyfillSupportDevMode","litHtmlPolyfillSupport","litHtmlVersions"],"sources":["/Users/marcwelz/Library/Mobile Documents/com~apple~CloudDocs/probe_ipa/project/ipa_frontend/node_modules/lit-html/src/lit-html.ts"],"sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n * SPDX-License-Identifier: BSD-3-Clause\n */\n\n// IMPORTANT: these imports must be type-only\nimport type {Directive, DirectiveResult, PartInfo} from './directive.js';\n\nconst DEV_MODE = true;\nconst ENABLE_EXTRA_SECURITY_HOOKS = true;\nconst ENABLE_SHADYDOM_NOPATCH = true;\n\n/**\n * Contains types that are part of the unstable debug API.\n *\n * Everything in this API is not stable and may change or be removed in the future,\n * even on patch releases.\n */\n// eslint-disable-next-line @typescript-eslint/no-namespace\nexport namespace LitUnstable {\n  /**\n   * When Lit is running in dev mode and `window.emitLitDebugLogEvents` is true,\n   * we will emit 'lit-debug' events to window, with live details about the update and render\n   * lifecycle. These can be useful for writing debug tooling and visualizations.\n   *\n   * Please be aware that running with window.emitLitDebugLogEvents has performance overhead,\n   * making certain operations that are normally very cheap (like a no-op render) much slower,\n   * because we must copy data and dispatch events.\n   */\n  // eslint-disable-next-line @typescript-eslint/no-namespace\n  export namespace DebugLog {\n    export type Entry =\n      | TemplatePrep\n      | TemplateInstantiated\n      | TemplateInstantiatedAndUpdated\n      | TemplateUpdating\n      | BeginRender\n      | EndRender\n      | CommitPartEntry\n      | SetPartValue;\n    export interface TemplatePrep {\n      kind: 'template prep';\n      template: Template;\n      strings: TemplateStringsArray;\n      clonableTemplate: HTMLTemplateElement;\n      parts: TemplatePart[];\n    }\n    export interface BeginRender {\n      kind: 'begin render';\n      id: number;\n      value: unknown;\n      container: HTMLElement | DocumentFragment;\n      options: RenderOptions | undefined;\n      part: ChildPart | undefined;\n    }\n    export interface EndRender {\n      kind: 'end render';\n      id: number;\n      value: unknown;\n      container: HTMLElement | DocumentFragment;\n      options: RenderOptions | undefined;\n      part: ChildPart;\n    }\n    export interface TemplateInstantiated {\n      kind: 'template instantiated';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      fragment: Node;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface TemplateInstantiatedAndUpdated {\n      kind: 'template instantiated and updated';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      fragment: Node;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface TemplateUpdating {\n      kind: 'template updating';\n      template: Template | CompiledTemplate;\n      instance: TemplateInstance;\n      options: RenderOptions | undefined;\n      parts: Array<Part | undefined>;\n      values: unknown[];\n    }\n    export interface SetPartValue {\n      kind: 'set part';\n      part: Part;\n      value: unknown;\n      valueIndex: number;\n      values: unknown[];\n      templateInstance: TemplateInstance;\n    }\n\n    export type CommitPartEntry =\n      | CommitNothingToChildEntry\n      | CommitText\n      | CommitNode\n      | CommitAttribute\n      | CommitProperty\n      | CommitBooleanAttribute\n      | CommitEventListener\n      | CommitToElementBinding;\n\n    export interface CommitNothingToChildEntry {\n      kind: 'commit nothing to child';\n      start: ChildNode;\n      end: ChildNode | null;\n      parent: Disconnectable | undefined;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitText {\n      kind: 'commit text';\n      node: Text;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitNode {\n      kind: 'commit node';\n      start: Node;\n      parent: Disconnectable | undefined;\n      value: Node;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitAttribute {\n      kind: 'commit attribute';\n      element: Element;\n      name: string;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitProperty {\n      kind: 'commit property';\n      element: Element;\n      name: string;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitBooleanAttribute {\n      kind: 'commit boolean attribute';\n      element: Element;\n      name: string;\n      value: boolean;\n      options: RenderOptions | undefined;\n    }\n\n    export interface CommitEventListener {\n      kind: 'commit event listener';\n      element: Element;\n      name: string;\n      value: unknown;\n      oldListener: unknown;\n      options: RenderOptions | undefined;\n      // True if we're removing the old event listener (e.g. because settings changed, or value is nothing)\n      removeListener: boolean;\n      // True if we're adding a new event listener (e.g. because first render, or settings changed)\n      addListener: boolean;\n    }\n\n    export interface CommitToElementBinding {\n      kind: 'commit to element binding';\n      element: Element;\n      value: unknown;\n      options: RenderOptions | undefined;\n    }\n  }\n}\n\ninterface DebugLoggingWindow {\n  // Even in dev mode, we generally don't want to emit these events, as that's\n  // another level of cost, so only emit them when DEV_MODE is true _and_ when\n  // window.emitLitDebugEvents is true.\n  emitLitDebugLogEvents?: boolean;\n}\n\n/**\n * Useful for visualizing and logging insights into what the Lit template system is doing.\n *\n * Compiled out of prod mode builds.\n */\nconst debugLogEvent = DEV_MODE\n  ? (event: LitUnstable.DebugLog.Entry) => {\n      const shouldEmit = (window as unknown as DebugLoggingWindow)\n        .emitLitDebugLogEvents;\n      if (!shouldEmit) {\n        return;\n      }\n      window.dispatchEvent(\n        new CustomEvent<LitUnstable.DebugLog.Entry>('lit-debug', {\n          detail: event,\n        })\n      );\n    }\n  : undefined;\n// Used for connecting beginRender and endRender events when there are nested\n// renders when errors are thrown preventing an endRender event from being\n// called.\nlet debugLogRenderId = 0;\n\nlet issueWarning: (code: string, warning: string) => void;\n\nif (DEV_MODE) {\n  globalThis.litIssuedWarnings ??= new Set();\n\n  // Issue a warning, if we haven't already.\n  issueWarning = (code: string, warning: string) => {\n    warning += code\n      ? ` See https://lit.dev/msg/${code} for more information.`\n      : '';\n    if (!globalThis.litIssuedWarnings!.has(warning)) {\n      console.warn(warning);\n      globalThis.litIssuedWarnings!.add(warning);\n    }\n  };\n\n  issueWarning(\n    'dev-mode',\n    `Lit is in dev mode. Not recommended for production!`\n  );\n}\n\nconst wrap =\n  ENABLE_SHADYDOM_NOPATCH &&\n  window.ShadyDOM?.inUse &&\n  window.ShadyDOM?.noPatch === true\n    ? window.ShadyDOM!.wrap\n    : (node: Node) => node;\n\nconst trustedTypes = (globalThis as unknown as Partial<Window>).trustedTypes;\n\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = trustedTypes\n  ? trustedTypes.createPolicy('lit-html', {\n      createHTML: (s) => s,\n    })\n  : undefined;\n\n/**\n * Used to sanitize any value before it is written into the DOM. This can be\n * used to implement a security policy of allowed and disallowed values in\n * order to prevent XSS attacks.\n *\n * One way of using this callback would be to check attributes and properties\n * against a list of high risk fields, and require that values written to such\n * fields be instances of a class which is safe by construction. Closure's Safe\n * HTML Types is one implementation of this technique (\n * https://github.com/google/safe-html-types/blob/master/doc/safehtml-types.md).\n * The TrustedTypes polyfill in API-only mode could also be used as a basis\n * for this technique (https://github.com/WICG/trusted-types).\n *\n * @param node The HTML node (usually either a #text node or an Element) that\n *     is being written to. Note that this is just an exemplar node, the write\n *     may take place against another instance of the same class of node.\n * @param name The name of an attribute or property (for example, 'href').\n * @param type Indicates whether the write that's about to be performed will\n *     be to a property or a node.\n * @return A function that will sanitize this class of writes.\n */\nexport type SanitizerFactory = (\n  node: Node,\n  name: string,\n  type: 'property' | 'attribute'\n) => ValueSanitizer;\n\n/**\n * A function which can sanitize values that will be written to a specific kind\n * of DOM sink.\n *\n * See SanitizerFactory.\n *\n * @param value The value to sanitize. Will be the actual value passed into\n *     the lit-html template literal, so this could be of any type.\n * @return The value to write to the DOM. Usually the same as the input value,\n *     unless sanitization is needed.\n */\nexport type ValueSanitizer = (value: unknown) => unknown;\n\nconst identityFunction: ValueSanitizer = (value: unknown) => value;\nconst noopSanitizer: SanitizerFactory = (\n  _node: Node,\n  _name: string,\n  _type: 'property' | 'attribute'\n) => identityFunction;\n\n/** Sets the global sanitizer factory. */\nconst setSanitizer = (newSanitizer: SanitizerFactory) => {\n  if (!ENABLE_EXTRA_SECURITY_HOOKS) {\n    return;\n  }\n  if (sanitizerFactoryInternal !== noopSanitizer) {\n    throw new Error(\n      `Attempted to overwrite existing lit-html security policy.` +\n        ` setSanitizeDOMValueFactory should be called at most once.`\n    );\n  }\n  sanitizerFactoryInternal = newSanitizer;\n};\n\n/**\n * Only used in internal tests, not a part of the public API.\n */\nconst _testOnlyClearSanitizerFactoryDoNotCallOrElse = () => {\n  sanitizerFactoryInternal = noopSanitizer;\n};\n\nconst createSanitizer: SanitizerFactory = (node, name, type) => {\n  return sanitizerFactoryInternal(node, name, type);\n};\n\n// Added to an attribute name to mark the attribute as bound so we can find\n// it easily.\nconst boundAttributeSuffix = '$lit$';\n\n// This marker is used in many syntactic positions in HTML, so it must be\n// a valid element name and attribute name. We don't support dynamic names (yet)\n// but this at least ensures that the parse tree is closer to the template\n// intention.\nconst marker = `lit$${String(Math.random()).slice(9)}$`;\n\n// String used to tell if a comment is a marker comment\nconst markerMatch = '?' + marker;\n\n// Text used to insert a comment marker node. We use processing instruction\n// syntax because it's slightly smaller, but parses as a comment node.\nconst nodeMarker = `<${markerMatch}>`;\n\nconst d = document;\n\n// Creates a dynamic marker. We never have to search for these in the DOM.\nconst createMarker = (v = '') => d.createComment(v);\n\n// https://tc39.github.io/ecma262/#sec-typeof-operator\ntype Primitive = null | undefined | boolean | number | string | symbol | bigint;\nconst isPrimitive = (value: unknown): value is Primitive =>\n  value === null || (typeof value != 'object' && typeof value != 'function');\nconst isArray = Array.isArray;\nconst isIterable = (value: unknown): value is Iterable<unknown> =>\n  isArray(value) ||\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  typeof (value as any)?.[Symbol.iterator] === 'function';\n\nconst SPACE_CHAR = `[ \\t\\n\\f\\r]`;\nconst ATTR_VALUE_CHAR = `[^ \\t\\n\\f\\r\"'\\`<>=]`;\nconst NAME_CHAR = `[^\\\\s\"'>=/]`;\n\n// These regexes represent the five parsing states that we care about in the\n// Template's HTML scanner. They match the *end* of the state they're named\n// after.\n// Depending on the match, we transition to a new state. If there's no match,\n// we stay in the same state.\n// Note that the regexes are stateful. We utilize lastIndex and sync it\n// across the multiple regexes used. In addition to the five regexes below\n// we also dynamically create a regex to find the matching end tags for raw\n// text elements.\n\n/**\n * End of text is: `<` followed by:\n *   (comment start) or (tag) or (dynamic tag binding)\n */\nconst textEndRegex = /<(?:(!--|\\/[^a-zA-Z])|(\\/?[a-zA-Z][^>\\s]*)|(\\/?$))/g;\nconst COMMENT_START = 1;\nconst TAG_NAME = 2;\nconst DYNAMIC_TAG_NAME = 3;\n\nconst commentEndRegex = /-->/g;\n/**\n * Comments not started with <!--, like </{, can be ended by a single `>`\n */\nconst comment2EndRegex = />/g;\n\n/**\n * The tagEnd regex matches the end of the \"inside an opening\" tag syntax\n * position. It either matches a `>`, an attribute-like sequence, or the end\n * of the string after a space (attribute-name position ending).\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\t\\n\\f\\r\" are HTML space characters:\n * https://infra.spec.whatwg.org/#ascii-whitespace\n *\n * So an attribute is:\n *  * The name: any character except a whitespace character, (\"), ('), \">\",\n *    \"=\", or \"/\". Note: this is different from the HTML spec which also excludes control characters.\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nconst tagEndRegex = new RegExp(\n  `>|${SPACE_CHAR}(?:(${NAME_CHAR}+)(${SPACE_CHAR}*=${SPACE_CHAR}*(?:${ATTR_VALUE_CHAR}|(\"|')|))|$)`,\n  'g'\n);\nconst ENTIRE_MATCH = 0;\nconst ATTRIBUTE_NAME = 1;\nconst SPACES_AND_EQUALS = 2;\nconst QUOTE_CHAR = 3;\n\nconst singleQuoteAttrEndRegex = /'/g;\nconst doubleQuoteAttrEndRegex = /\"/g;\n/**\n * Matches the raw text elements.\n *\n * Comments are not parsed within raw text elements, so we need to search their\n * text content for marker strings.\n */\nconst rawTextElement = /^(?:script|style|textarea|title)$/i;\n\n/** TemplateResult types */\nconst HTML_RESULT = 1;\nconst SVG_RESULT = 2;\n\ntype ResultType = typeof HTML_RESULT | typeof SVG_RESULT;\n\n// TemplatePart types\n// IMPORTANT: these must match the values in PartType\nconst ATTRIBUTE_PART = 1;\nconst CHILD_PART = 2;\nconst PROPERTY_PART = 3;\nconst BOOLEAN_ATTRIBUTE_PART = 4;\nconst EVENT_PART = 5;\nconst ELEMENT_PART = 6;\nconst COMMENT_PART = 7;\n\n/**\n * The return type of the template tag functions, {@linkcode html} and\n * {@linkcode svg}.\n *\n * A `TemplateResult` object holds all the information about a template\n * expression required to render it: the template strings, expression values,\n * and type of template (html or svg).\n *\n * `TemplateResult` objects do not create any DOM on their own. To create or\n * update DOM you need to render the `TemplateResult`. See\n * [Rendering](https://lit.dev/docs/components/rendering) for more information.\n *\n */\nexport type TemplateResult<T extends ResultType = ResultType> = {\n  // This property needs to remain unminified.\n  ['_$litType$']: T;\n  strings: TemplateStringsArray;\n  values: unknown[];\n};\n\nexport type HTMLTemplateResult = TemplateResult<typeof HTML_RESULT>;\n\nexport type SVGTemplateResult = TemplateResult<typeof SVG_RESULT>;\n\nexport interface CompiledTemplateResult {\n  // This is a factory in order to make template initialization lazy\n  // and allow ShadyRenderOptions scope to be passed in.\n  // This property needs to remain unminified.\n  ['_$litType$']: CompiledTemplate;\n  values: unknown[];\n}\n\nexport interface CompiledTemplate extends Omit<Template, 'el'> {\n  // el is overridden to be optional. We initialize it on first render\n  el?: HTMLTemplateElement;\n\n  // The prepared HTML string to create a template element from.\n  h: TrustedHTML;\n}\n\n/**\n * Generates a template literal tag function that returns a TemplateResult with\n * the given result type.\n */\nconst tag =\n  <T extends ResultType>(type: T) =>\n  (strings: TemplateStringsArray, ...values: unknown[]): TemplateResult<T> => {\n    // Warn against templates octal escape sequences\n    // We do this here rather than in render so that the warning is closer to the\n    // template definition.\n    if (DEV_MODE && strings.some((s) => s === undefined)) {\n      console.warn(\n        'Some template strings are undefined.\\n' +\n          'This is probably caused by illegal octal escape sequences.'\n      );\n    }\n    return {\n      // This property needs to remain unminified.\n      ['_$litType$']: type,\n      strings,\n      values,\n    };\n  };\n\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n *\n * ```ts\n * const header = (title: string) => html`<h1>${title}</h1>`;\n * ```\n *\n * The `html` tag returns a description of the DOM to render as a value. It is\n * lazy, meaning no work is done until the template is rendered. When rendering,\n * if a template comes from the same expression as a previously rendered result,\n * it's efficiently updated instead of replaced.\n */\nexport const html = tag(HTML_RESULT);\n\n/**\n * Interprets a template literal as an SVG fragment that can efficiently\n * render to and update a container.\n *\n * ```ts\n * const rect = svg`<rect width=\"10\" height=\"10\"></rect>`;\n *\n * const myImage = html`\n *   <svg viewBox=\"0 0 10 10\" xmlns=\"http://www.w3.org/2000/svg\">\n *     ${rect}\n *   </svg>`;\n * ```\n *\n * The `svg` *tag function* should only be used for SVG fragments, or elements\n * that would be contained **inside** an `<svg>` HTML element. A common error is\n * placing an `<svg>` *element* in a template tagged with the `svg` tag\n * function. The `<svg>` element is an HTML element and should be used within a\n * template tagged with the {@linkcode html} tag function.\n *\n * In LitElement usage, it's invalid to return an SVG fragment from the\n * `render()` method, as the SVG fragment will be contained within the element's\n * shadow root and thus cannot be used within an `<svg>` HTML element.\n */\nexport const svg = tag(SVG_RESULT);\n\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = Symbol.for('lit-noChange');\n\n/**\n * A sentinel value that signals a ChildPart to fully clear its content.\n *\n * ```ts\n * const button = html`${\n *  user.isAdmin\n *    ? html`<button>DELETE</button>`\n *    : nothing\n * }`;\n * ```\n *\n * Prefer using `nothing` over other falsy values as it provides a consistent\n * behavior between various expression binding contexts.\n *\n * In child expressions, `undefined`, `null`, `''`, and `nothing` all behave the\n * same and render no nodes. In attribute expressions, `nothing` _removes_ the\n * attribute, while `undefined` and `null` will render an empty string. In\n * property expressions `nothing` becomes `undefined`.\n */\nexport const nothing = Symbol.for('lit-nothing');\n\n/**\n * The cache of prepared templates, keyed by the tagged TemplateStringsArray\n * and _not_ accounting for the specific template tag used. This means that\n * template tags cannot be dynamic - the must statically be one of html, svg,\n * or attr. This restriction simplifies the cache lookup, which is on the hot\n * path for rendering.\n */\nconst templateCache = new WeakMap<TemplateStringsArray, Template>();\n\n/**\n * Object specifying options for controlling lit-html rendering. Note that\n * while `render` may be called multiple times on the same `container` (and\n * `renderBefore` reference node) to efficiently update the rendered content,\n * only the options passed in during the first render are respected during\n * the lifetime of renders to that unique `container` + `renderBefore`\n * combination.\n */\nexport interface RenderOptions {\n  /**\n   * An object to use as the `this` value for event listeners. It's often\n   * useful to set this to the host component rendering a template.\n   */\n  host?: object;\n  /**\n   * A DOM node before which to render content in the container.\n   */\n  renderBefore?: ChildNode | null;\n  /**\n   * Node used for cloning the template (`importNode` will be called on this\n   * node). This controls the `ownerDocument` of the rendered DOM, along with\n   * any inherited context. Defaults to the global `document`.\n   */\n  creationScope?: {importNode(node: Node, deep?: boolean): Node};\n  /**\n   * The initial connected state for the top-level part being rendered. If no\n   * `isConnected` option is set, `AsyncDirective`s will be connected by\n   * default. Set to `false` if the initial render occurs in a disconnected tree\n   * and `AsyncDirective`s should see `isConnected === false` for their initial\n   * render. The `part.setConnected()` method must be used subsequent to initial\n   * render to change the connected state of the part.\n   */\n  isConnected?: boolean;\n}\n\n/**\n * Renders a value, usually a lit-html TemplateResult, to the container.\n *\n * This example renders the text \"Hello, Zoe!\" inside a paragraph tag, appending\n * it to the container `document.body`.\n *\n * ```js\n * import {html, render} from 'lit';\n *\n * const name = \"Zoe\";\n * render(html`<p>Hello, ${name}!</p>`, document.body);\n * ```\n *\n * @param value Any [renderable\n *   value](https://lit.dev/docs/templates/expressions/#child-expressions),\n *   typically a {@linkcode TemplateResult} created by evaluating a template tag\n *   like {@linkcode html} or {@linkcode svg}.\n * @param container A DOM container to render to. The first render will append\n *   the rendered value to the container, and subsequent renders will\n *   efficiently update the rendered value if the same result type was\n *   previously rendered there.\n * @param options See {@linkcode RenderOptions} for options documentation.\n * @see\n * {@link https://lit.dev/docs/libraries/standalone-templates/#rendering-lit-html-templates| Rendering Lit HTML Templates}\n */\nexport const render = (\n  value: unknown,\n  container: HTMLElement | DocumentFragment,\n  options?: RenderOptions\n): RootPart => {\n  if (DEV_MODE && container == null) {\n    // Give a clearer error message than\n    //     Uncaught TypeError: Cannot read properties of null (reading\n    //     '_$litPart$')\n    // which reads like an internal Lit error.\n    throw new TypeError(`The container to render into may not be ${container}`);\n  }\n  const renderId = DEV_MODE ? debugLogRenderId++ : 0;\n  const partOwnerNode = options?.renderBefore ?? container;\n  // This property needs to remain unminified.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  let part: ChildPart = (partOwnerNode as any)['_$litPart$'];\n  debugLogEvent?.({\n    kind: 'begin render',\n    id: renderId,\n    value,\n    container,\n    options,\n    part,\n  });\n  if (part === undefined) {\n    const endNode = options?.renderBefore ?? null;\n    // This property needs to remain unminified.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (partOwnerNode as any)['_$litPart$'] = part = new ChildPart(\n      container.insertBefore(createMarker(), endNode),\n      endNode,\n      undefined,\n      options ?? {}\n    );\n  }\n  part._$setValue(value);\n  debugLogEvent?.({\n    kind: 'end render',\n    id: renderId,\n    value,\n    container,\n    options,\n    part,\n  });\n  return part as RootPart;\n};\n\nif (ENABLE_EXTRA_SECURITY_HOOKS) {\n  render.setSanitizer = setSanitizer;\n  render.createSanitizer = createSanitizer;\n  if (DEV_MODE) {\n    render._testOnlyClearSanitizerFactoryDoNotCallOrElse =\n      _testOnlyClearSanitizerFactoryDoNotCallOrElse;\n  }\n}\n\nconst walker = d.createTreeWalker(\n  d,\n  129 /* NodeFilter.SHOW_{ELEMENT|COMMENT} */,\n  null,\n  false\n);\n\nlet sanitizerFactoryInternal: SanitizerFactory = noopSanitizer;\n\n//\n// Classes only below here, const variable declarations only above here...\n//\n// Keeping variable declarations and classes together improves minification.\n// Interfaces and type aliases can be interleaved freely.\n//\n\n// Type for classes that have a `_directive` or `_directives[]` field, used by\n// `resolveDirective`\nexport interface DirectiveParent {\n  _$parent?: DirectiveParent;\n  _$isConnected: boolean;\n  __directive?: Directive;\n  __directives?: Array<Directive | undefined>;\n}\n\n/**\n * Returns an HTML string for the given TemplateStringsArray and result type\n * (HTML or SVG), along with the case-sensitive bound attribute names in\n * template order. The HTML contains comment comment markers denoting the\n * `ChildPart`s and suffixes on bound attributes denoting the `AttributeParts`.\n *\n * @param strings template strings array\n * @param type HTML or SVG\n * @return Array containing `[html, attrNames]` (array returned for terseness,\n *     to avoid object fields since this code is shared with non-minified SSR\n *     code)\n */\nconst getTemplateHtml = (\n  strings: TemplateStringsArray,\n  type: ResultType\n): [TrustedHTML, Array<string | undefined>] => {\n  // Insert makers into the template HTML to represent the position of\n  // bindings. The following code scans the template strings to determine the\n  // syntactic position of the bindings. They can be in text position, where\n  // we insert an HTML comment, attribute value position, where we insert a\n  // sentinel string and re-write the attribute name, or inside a tag where\n  // we insert the sentinel string.\n  const l = strings.length - 1;\n  // Stores the case-sensitive bound attribute names in the order of their\n  // parts. ElementParts are also reflected in this array as undefined\n  // rather than a string, to disambiguate from attribute bindings.\n  const attrNames: Array<string | undefined> = [];\n  let html = type === SVG_RESULT ? '<svg>' : '';\n\n  // When we're inside a raw text tag (not it's text content), the regex\n  // will still be tagRegex so we can find attributes, but will switch to\n  // this regex when the tag ends.\n  let rawTextEndRegex: RegExp | undefined;\n\n  // The current parsing state, represented as a reference to one of the\n  // regexes\n  let regex = textEndRegex;\n\n  for (let i = 0; i < l; i++) {\n    const s = strings[i];\n    // The index of the end of the last attribute name. When this is\n    // positive at end of a string, it means we're in an attribute value\n    // position and need to rewrite the attribute name.\n    // We also use a special value of -2 to indicate that we encountered\n    // the end of a string in attribute name position.\n    let attrNameEndIndex = -1;\n    let attrName: string | undefined;\n    let lastIndex = 0;\n    let match!: RegExpExecArray | null;\n\n    // The conditions in this loop handle the current parse state, and the\n    // assignments to the `regex` variable are the state transitions.\n    while (lastIndex < s.length) {\n      // Make sure we start searching from where we previously left off\n      regex.lastIndex = lastIndex;\n      match = regex.exec(s);\n      if (match === null) {\n        break;\n      }\n      lastIndex = regex.lastIndex;\n      if (regex === textEndRegex) {\n        if (match[COMMENT_START] === '!--') {\n          regex = commentEndRegex;\n        } else if (match[COMMENT_START] !== undefined) {\n          // We started a weird comment, like </{\n          regex = comment2EndRegex;\n        } else if (match[TAG_NAME] !== undefined) {\n          if (rawTextElement.test(match[TAG_NAME])) {\n            // Record if we encounter a raw-text element. We'll switch to\n            // this regex at the end of the tag.\n            rawTextEndRegex = new RegExp(`</${match[TAG_NAME]}`, 'g');\n          }\n          regex = tagEndRegex;\n        } else if (match[DYNAMIC_TAG_NAME] !== undefined) {\n          if (DEV_MODE) {\n            throw new Error(\n              'Bindings in tag names are not supported. Please use static templates instead. ' +\n                'See https://lit.dev/docs/templates/expressions/#static-expressions'\n            );\n          }\n          regex = tagEndRegex;\n        }\n      } else if (regex === tagEndRegex) {\n        if (match[ENTIRE_MATCH] === '>') {\n          // End of a tag. If we had started a raw-text element, use that\n          // regex\n          regex = rawTextEndRegex ?? textEndRegex;\n          // We may be ending an unquoted attribute value, so make sure we\n          // clear any pending attrNameEndIndex\n          attrNameEndIndex = -1;\n        } else if (match[ATTRIBUTE_NAME] === undefined) {\n          // Attribute name position\n          attrNameEndIndex = -2;\n        } else {\n          attrNameEndIndex = regex.lastIndex - match[SPACES_AND_EQUALS].length;\n          attrName = match[ATTRIBUTE_NAME];\n          regex =\n            match[QUOTE_CHAR] === undefined\n              ? tagEndRegex\n              : match[QUOTE_CHAR] === '\"'\n              ? doubleQuoteAttrEndRegex\n              : singleQuoteAttrEndRegex;\n        }\n      } else if (\n        regex === doubleQuoteAttrEndRegex ||\n        regex === singleQuoteAttrEndRegex\n      ) {\n        regex = tagEndRegex;\n      } else if (regex === commentEndRegex || regex === comment2EndRegex) {\n        regex = textEndRegex;\n      } else {\n        // Not one of the five state regexes, so it must be the dynamically\n        // created raw text regex and we're at the close of that element.\n        regex = tagEndRegex;\n        rawTextEndRegex = undefined;\n      }\n    }\n\n    if (DEV_MODE) {\n      // If we have a attrNameEndIndex, which indicates that we should\n      // rewrite the attribute name, assert that we're in a valid attribute\n      // position - either in a tag, or a quoted attribute value.\n      console.assert(\n        attrNameEndIndex === -1 ||\n          regex === tagEndRegex ||\n          regex === singleQuoteAttrEndRegex ||\n          regex === doubleQuoteAttrEndRegex,\n        'unexpected parse state B'\n      );\n    }\n\n    // We have four cases:\n    //  1. We're in text position, and not in a raw text element\n    //     (regex === textEndRegex): insert a comment marker.\n    //  2. We have a non-negative attrNameEndIndex which means we need to\n    //     rewrite the attribute name to add a bound attribute suffix.\n    //  3. We're at the non-first binding in a multi-binding attribute, use a\n    //     plain marker.\n    //  4. We're somewhere else inside the tag. If we're in attribute name\n    //     position (attrNameEndIndex === -2), add a sequential suffix to\n    //     generate a unique attribute name.\n\n    // Detect a binding next to self-closing tag end and insert a space to\n    // separate the marker from the tag end:\n    const end =\n      regex === tagEndRegex && strings[i + 1].startsWith('/>') ? ' ' : '';\n    html +=\n      regex === textEndRegex\n        ? s + nodeMarker\n        : attrNameEndIndex >= 0\n        ? (attrNames.push(attrName!),\n          s.slice(0, attrNameEndIndex) +\n            boundAttributeSuffix +\n            s.slice(attrNameEndIndex)) +\n          marker +\n          end\n        : s +\n          marker +\n          (attrNameEndIndex === -2 ? (attrNames.push(undefined), i) : end);\n  }\n\n  const htmlResult: string | TrustedHTML =\n    html + (strings[l] || '<?>') + (type === SVG_RESULT ? '</svg>' : '');\n\n  // A security check to prevent spoofing of Lit template results.\n  // In the future, we may be able to replace this with Array.isTemplateObject,\n  // though we might need to make that check inside of the html and svg\n  // functions, because precompiled templates don't come in as\n  // TemplateStringArray objects.\n  if (!Array.isArray(strings) || !strings.hasOwnProperty('raw')) {\n    let message = 'invalid template strings array';\n    if (DEV_MODE) {\n      message = `\n          Internal Error: expected template strings to be an array\n          with a 'raw' field. Faking a template strings array by\n          calling html or svg like an ordinary function is effectively\n          the same as calling unsafeHtml and can lead to major security\n          issues, e.g. opening your code up to XSS attacks.\n\n          If you're using the html or svg tagged template functions normally\n          and and still seeing this error, please file a bug at\n          https://github.com/lit/lit/issues/new?template=bug_report.md\n          and include information about your build tooling, if any.\n        `\n        .trim()\n        .replace(/\\n */g, '\\n');\n    }\n    throw new Error(message);\n  }\n  // Returned as an array for terseness\n  return [\n    policy !== undefined\n      ? policy.createHTML(htmlResult)\n      : (htmlResult as unknown as TrustedHTML),\n    attrNames,\n  ];\n};\n\n/** @internal */\nexport type {Template};\nclass Template {\n  /** @internal */\n  el!: HTMLTemplateElement;\n  /** @internal */\n  parts: Array<TemplatePart> = [];\n\n  constructor(\n    // This property needs to remain unminified.\n    {strings, ['_$litType$']: type}: TemplateResult,\n    options?: RenderOptions\n  ) {\n    let node: Node | null;\n    let nodeIndex = 0;\n    let attrNameIndex = 0;\n    const partCount = strings.length - 1;\n    const parts = this.parts;\n\n    // Create template element\n    const [html, attrNames] = getTemplateHtml(strings, type);\n    this.el = Template.createElement(html, options);\n    walker.currentNode = this.el.content;\n\n    // Reparent SVG nodes into template root\n    if (type === SVG_RESULT) {\n      const content = this.el.content;\n      const svgElement = content.firstChild!;\n      svgElement.remove();\n      content.append(...svgElement.childNodes);\n    }\n\n    // Walk the template to find binding markers and create TemplateParts\n    while ((node = walker.nextNode()) !== null && parts.length < partCount) {\n      if (node.nodeType === 1) {\n        if (DEV_MODE) {\n          const tag = (node as Element).localName;\n          // Warn if `textarea` includes an expression and throw if `template`\n          // does since these are not supported. We do this by checking\n          // innerHTML for anything that looks like a marker. This catches\n          // cases like bindings in textarea there markers turn into text nodes.\n          if (\n            /^(?:textarea|template)$/i!.test(tag) &&\n            (node as Element).innerHTML.includes(marker)\n          ) {\n            const m =\n              `Expressions are not supported inside \\`${tag}\\` ` +\n              `elements. See https://lit.dev/msg/expression-in-${tag} for more ` +\n              `information.`;\n            if (tag === 'template') {\n              throw new Error(m);\n            } else issueWarning('', m);\n          }\n        }\n        // TODO (justinfagnani): for attempted dynamic tag names, we don't\n        // increment the bindingIndex, and it'll be off by 1 in the element\n        // and off by two after it.\n        if ((node as Element).hasAttributes()) {\n          // We defer removing bound attributes because on IE we might not be\n          // iterating attributes in their template order, and would sometimes\n          // remove an attribute that we still need to create a part for.\n          const attrsToRemove = [];\n          for (const name of (node as Element).getAttributeNames()) {\n            // `name` is the name of the attribute we're iterating over, but not\n            // _neccessarily_ the name of the attribute we will create a part\n            // for. They can be different in browsers that don't iterate on\n            // attributes in source order. In that case the attrNames array\n            // contains the attribute name we'll process next. We only need the\n            // attribute name here to know if we should process a bound attribute\n            // on this element.\n            if (\n              name.endsWith(boundAttributeSuffix) ||\n              name.startsWith(marker)\n            ) {\n              const realName = attrNames[attrNameIndex++];\n              attrsToRemove.push(name);\n              if (realName !== undefined) {\n                // Lowercase for case-sensitive SVG attributes like viewBox\n                const value = (node as Element).getAttribute(\n                  realName.toLowerCase() + boundAttributeSuffix\n                )!;\n                const statics = value.split(marker);\n                const m = /([.?@])?(.*)/.exec(realName)!;\n                parts.push({\n                  type: ATTRIBUTE_PART,\n                  index: nodeIndex,\n                  name: m[2],\n                  strings: statics,\n                  ctor:\n                    m[1] === '.'\n                      ? PropertyPart\n                      : m[1] === '?'\n                      ? BooleanAttributePart\n                      : m[1] === '@'\n                      ? EventPart\n                      : AttributePart,\n                });\n              } else {\n                parts.push({\n                  type: ELEMENT_PART,\n                  index: nodeIndex,\n                });\n              }\n            }\n          }\n          for (const name of attrsToRemove) {\n            (node as Element).removeAttribute(name);\n          }\n        }\n        // TODO (justinfagnani): benchmark the regex against testing for each\n        // of the 3 raw text element names.\n        if (rawTextElement.test((node as Element).tagName)) {\n          // For raw text elements we need to split the text content on\n          // markers, create a Text node for each segment, and create\n          // a TemplatePart for each marker.\n          const strings = (node as Element).textContent!.split(marker);\n          const lastIndex = strings.length - 1;\n          if (lastIndex > 0) {\n            (node as Element).textContent = trustedTypes\n              ? (trustedTypes.emptyScript as unknown as '')\n              : '';\n            // Generate a new text node for each literal section\n            // These nodes are also used as the markers for node parts\n            // We can't use empty text nodes as markers because they're\n            // normalized when cloning in IE (could simplify when\n            // IE is no longer supported)\n            for (let i = 0; i < lastIndex; i++) {\n              (node as Element).append(strings[i], createMarker());\n              // Walk past the marker node we just added\n              walker.nextNode();\n              parts.push({type: CHILD_PART, index: ++nodeIndex});\n            }\n            // Note because this marker is added after the walker's current\n            // node, it will be walked to in the outer loop (and ignored), so\n            // we don't need to adjust nodeIndex here\n            (node as Element).append(strings[lastIndex], createMarker());\n          }\n        }\n      } else if (node.nodeType === 8) {\n        const data = (node as Comment).data;\n        if (data === markerMatch) {\n          parts.push({type: CHILD_PART, index: nodeIndex});\n        } else {\n          let i = -1;\n          while ((i = (node as Comment).data.indexOf(marker, i + 1)) !== -1) {\n            // Comment node has a binding marker inside, make an inactive part\n            // The binding won't work, but subsequent bindings will\n            parts.push({type: COMMENT_PART, index: nodeIndex});\n            // Move to the end of the match\n            i += marker.length - 1;\n          }\n        }\n      }\n      nodeIndex++;\n    }\n    debugLogEvent?.({\n      kind: 'template prep',\n      template: this,\n      clonableTemplate: this.el,\n      parts: this.parts,\n      strings,\n    });\n  }\n\n  // Overridden via `litHtmlPolyfillSupport` to provide platform support.\n  /** @nocollapse */\n  static createElement(html: TrustedHTML, _options?: RenderOptions) {\n    const el = d.createElement('template');\n    el.innerHTML = html as unknown as string;\n    return el;\n  }\n}\n\nexport interface Disconnectable {\n  _$parent?: Disconnectable;\n  _$disconnectableChildren?: Set<Disconnectable>;\n  // Rather than hold connection state on instances, Disconnectables recursively\n  // fetch the connection state from the RootPart they are connected in via\n  // getters up the Disconnectable tree via _$parent references. This pushes the\n  // cost of tracking the isConnected state to `AsyncDirectives`, and avoids\n  // needing to pass all Disconnectables (parts, template instances, and\n  // directives) their connection state each time it changes, which would be\n  // costly for trees that have no AsyncDirectives.\n  _$isConnected: boolean;\n}\n\nfunction resolveDirective(\n  part: ChildPart | AttributePart | ElementPart,\n  value: unknown,\n  parent: DirectiveParent = part,\n  attributeIndex?: number\n): unknown {\n  // Bail early if the value is explicitly noChange. Note, this means any\n  // nested directive is still attached and is not run.\n  if (value === noChange) {\n    return value;\n  }\n  let currentDirective =\n    attributeIndex !== undefined\n      ? (parent as AttributePart).__directives?.[attributeIndex]\n      : (parent as ChildPart | ElementPart | Directive).__directive;\n  const nextDirectiveConstructor = isPrimitive(value)\n    ? undefined\n    : // This property needs to remain unminified.\n      (value as DirectiveResult)['_$litDirective$'];\n  if (currentDirective?.constructor !== nextDirectiveConstructor) {\n    // This property needs to remain unminified.\n    currentDirective?.['_$notifyDirectiveConnectionChanged']?.(false);\n    if (nextDirectiveConstructor === undefined) {\n      currentDirective = undefined;\n    } else {\n      currentDirective = new nextDirectiveConstructor(part as PartInfo);\n      currentDirective._$initialize(part, parent, attributeIndex);\n    }\n    if (attributeIndex !== undefined) {\n      ((parent as AttributePart).__directives ??= [])[attributeIndex] =\n        currentDirective;\n    } else {\n      (parent as ChildPart | Directive).__directive = currentDirective;\n    }\n  }\n  if (currentDirective !== undefined) {\n    value = resolveDirective(\n      part,\n      currentDirective._$resolve(part, (value as DirectiveResult).values),\n      currentDirective,\n      attributeIndex\n    );\n  }\n  return value;\n}\n\n/**\n * An updateable instance of a Template. Holds references to the Parts used to\n * update the template instance.\n */\nclass TemplateInstance implements Disconnectable {\n  /** @internal */\n  _$template: Template;\n  /** @internal */\n  _parts: Array<Part | undefined> = [];\n\n  /** @internal */\n  _$parent: ChildPart;\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  constructor(template: Template, parent: ChildPart) {\n    this._$template = template;\n    this._$parent = parent;\n  }\n\n  // Called by ChildPart parentNode getter\n  get parentNode() {\n    return this._$parent.parentNode;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  // This method is separate from the constructor because we need to return a\n  // DocumentFragment and we don't want to hold onto it with an instance field.\n  _clone(options: RenderOptions | undefined) {\n    const {\n      el: {content},\n      parts: parts,\n    } = this._$template;\n    const fragment = (options?.creationScope ?? d).importNode(content, true);\n    walker.currentNode = fragment;\n\n    let node = walker.nextNode()!;\n    let nodeIndex = 0;\n    let partIndex = 0;\n    let templatePart = parts[0];\n\n    while (templatePart !== undefined) {\n      if (nodeIndex === templatePart.index) {\n        let part: Part | undefined;\n        if (templatePart.type === CHILD_PART) {\n          part = new ChildPart(\n            node as HTMLElement,\n            node.nextSibling,\n            this,\n            options\n          );\n        } else if (templatePart.type === ATTRIBUTE_PART) {\n          part = new templatePart.ctor(\n            node as HTMLElement,\n            templatePart.name,\n            templatePart.strings,\n            this,\n            options\n          );\n        } else if (templatePart.type === ELEMENT_PART) {\n          part = new ElementPart(node as HTMLElement, this, options);\n        }\n        this._parts.push(part);\n        templatePart = parts[++partIndex];\n      }\n      if (nodeIndex !== templatePart?.index) {\n        node = walker.nextNode()!;\n        nodeIndex++;\n      }\n    }\n    return fragment;\n  }\n\n  _update(values: Array<unknown>) {\n    let i = 0;\n    for (const part of this._parts) {\n      if (part !== undefined) {\n        debugLogEvent?.({\n          kind: 'set part',\n          part,\n          value: values[i],\n          valueIndex: i,\n          values,\n          templateInstance: this,\n        });\n        if ((part as AttributePart).strings !== undefined) {\n          (part as AttributePart)._$setValue(values, part as AttributePart, i);\n          // The number of values the part consumes is part.strings.length - 1\n          // since values are in between template spans. We increment i by 1\n          // later in the loop, so increment it by part.strings.length - 2 here\n          i += (part as AttributePart).strings!.length - 2;\n        } else {\n          part._$setValue(values[i]);\n        }\n      }\n      i++;\n    }\n  }\n}\n\n/*\n * Parts\n */\ntype AttributeTemplatePart = {\n  readonly type: typeof ATTRIBUTE_PART;\n  readonly index: number;\n  readonly name: string;\n  /** @internal */\n  readonly ctor: typeof AttributePart;\n  /** @internal */\n  readonly strings: ReadonlyArray<string>;\n};\ntype NodeTemplatePart = {\n  readonly type: typeof CHILD_PART;\n  readonly index: number;\n};\ntype ElementTemplatePart = {\n  readonly type: typeof ELEMENT_PART;\n  readonly index: number;\n};\ntype CommentTemplatePart = {\n  readonly type: typeof COMMENT_PART;\n  readonly index: number;\n};\n\n/**\n * A TemplatePart represents a dynamic part in a template, before the template\n * is instantiated. When a template is instantiated Parts are created from\n * TemplateParts.\n */\ntype TemplatePart =\n  | NodeTemplatePart\n  | AttributeTemplatePart\n  | ElementTemplatePart\n  | CommentTemplatePart;\n\nexport type Part =\n  | ChildPart\n  | AttributePart\n  | PropertyPart\n  | BooleanAttributePart\n  | ElementPart\n  | EventPart;\n\nexport type {ChildPart};\nclass ChildPart implements Disconnectable {\n  readonly type = CHILD_PART;\n  readonly options: RenderOptions | undefined;\n  _$committedValue: unknown = nothing;\n  /** @internal */\n  __directive?: Directive;\n  /** @internal */\n  _$startNode: ChildNode;\n  /** @internal */\n  _$endNode: ChildNode | null;\n  private _textSanitizer: ValueSanitizer | undefined;\n  /** @internal */\n  _$parent: Disconnectable | undefined;\n  /**\n   * Connection state for RootParts only (i.e. ChildPart without _$parent\n   * returned from top-level `render`). This field is unsed otherwise. The\n   * intention would clearer if we made `RootPart` a subclass of `ChildPart`\n   * with this field (and a different _$isConnected getter), but the subclass\n   * caused a perf regression, possibly due to making call sites polymorphic.\n   * @internal\n   */\n  __isConnected: boolean;\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    // ChildParts that are not at the root should always be created with a\n    // parent; only RootChildNode's won't, so they return the local isConnected\n    // state\n    return this._$parent?._$isConnected ?? this.__isConnected;\n  }\n\n  // The following fields will be patched onto ChildParts when required by\n  // AsyncDirective\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n  /** @internal */\n  _$notifyConnectionChanged?(\n    isConnected: boolean,\n    removeFromParent?: boolean,\n    from?: number\n  ): void;\n  /** @internal */\n  _$reparentDisconnectables?(parent: Disconnectable): void;\n\n  constructor(\n    startNode: ChildNode,\n    endNode: ChildNode | null,\n    parent: TemplateInstance | ChildPart | undefined,\n    options: RenderOptions | undefined\n  ) {\n    this._$startNode = startNode;\n    this._$endNode = endNode;\n    this._$parent = parent;\n    this.options = options;\n    // Note __isConnected is only ever accessed on RootParts (i.e. when there is\n    // no _$parent); the value on a non-root-part is \"don't care\", but checking\n    // for parent would be more code\n    this.__isConnected = options?.isConnected ?? true;\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      // Explicitly initialize for consistent class shape.\n      this._textSanitizer = undefined;\n    }\n  }\n\n  /**\n   * The parent node into which the part renders its content.\n   *\n   * A ChildPart's content consists of a range of adjacent child nodes of\n   * `.parentNode`, possibly bordered by 'marker nodes' (`.startNode` and\n   * `.endNode`).\n   *\n   * - If both `.startNode` and `.endNode` are non-null, then the part's content\n   * consists of all siblings between `.startNode` and `.endNode`, exclusively.\n   *\n   * - If `.startNode` is non-null but `.endNode` is null, then the part's\n   * content consists of all siblings following `.startNode`, up to and\n   * including the last child of `.parentNode`. If `.endNode` is non-null, then\n   * `.startNode` will always be non-null.\n   *\n   * - If both `.endNode` and `.startNode` are null, then the part's content\n   * consists of all child nodes of `.parentNode`.\n   */\n  get parentNode(): Node {\n    let parentNode: Node = wrap(this._$startNode).parentNode!;\n    const parent = this._$parent;\n    if (\n      parent !== undefined &&\n      parentNode.nodeType === 11 /* Node.DOCUMENT_FRAGMENT */\n    ) {\n      // If the parentNode is a DocumentFragment, it may be because the DOM is\n      // still in the cloned fragment during initial render; if so, get the real\n      // parentNode the part will be committed into by asking the parent.\n      parentNode = (parent as ChildPart | TemplateInstance).parentNode;\n    }\n    return parentNode;\n  }\n\n  /**\n   * The part's leading marker node, if any. See `.parentNode` for more\n   * information.\n   */\n  get startNode(): Node | null {\n    return this._$startNode;\n  }\n\n  /**\n   * The part's trailing marker node, if any. See `.parentNode` for more\n   * information.\n   */\n  get endNode(): Node | null {\n    return this._$endNode;\n  }\n\n  _$setValue(value: unknown, directiveParent: DirectiveParent = this): void {\n    if (DEV_MODE && this.parentNode === null) {\n      throw new Error(\n        `This \\`ChildPart\\` has no \\`parentNode\\` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's \\`innerHTML\\` or \\`textContent\\` can do this.`\n      );\n    }\n    value = resolveDirective(this, value, directiveParent);\n    if (isPrimitive(value)) {\n      // Non-rendering child values. It's important that these do not render\n      // empty text nodes to avoid issues with preventing default <slot>\n      // fallback content.\n      if (value === nothing || value == null || value === '') {\n        if (this._$committedValue !== nothing) {\n          debugLogEvent?.({\n            kind: 'commit nothing to child',\n            start: this._$startNode,\n            end: this._$endNode,\n            parent: this._$parent,\n            options: this.options,\n          });\n          this._$clear();\n        }\n        this._$committedValue = nothing;\n      } else if (value !== this._$committedValue && value !== noChange) {\n        this._commitText(value);\n      }\n      // This property needs to remain unminified.\n    } else if ((value as TemplateResult)['_$litType$'] !== undefined) {\n      this._commitTemplateResult(value as TemplateResult);\n    } else if ((value as Node).nodeType !== undefined) {\n      this._commitNode(value as Node);\n    } else if (isIterable(value)) {\n      this._commitIterable(value);\n    } else {\n      // Fallback, will render the string representation\n      this._commitText(value);\n    }\n  }\n\n  private _insert<T extends Node>(node: T, ref = this._$endNode) {\n    return wrap(wrap(this._$startNode).parentNode!).insertBefore(node, ref);\n  }\n\n  private _commitNode(value: Node): void {\n    if (this._$committedValue !== value) {\n      this._$clear();\n      if (\n        ENABLE_EXTRA_SECURITY_HOOKS &&\n        sanitizerFactoryInternal !== noopSanitizer\n      ) {\n        const parentNodeName = this._$startNode.parentNode?.nodeName;\n        if (parentNodeName === 'STYLE' || parentNodeName === 'SCRIPT') {\n          let message = 'Forbidden';\n          if (DEV_MODE) {\n            if (parentNodeName === 'STYLE') {\n              message =\n                `Lit does not support binding inside style nodes. ` +\n                `This is a security risk, as style injection attacks can ` +\n                `exfiltrate data and spoof UIs. ` +\n                `Consider instead using css\\`...\\` literals ` +\n                `to compose styles, and make do dynamic styling with ` +\n                `css custom properties, ::parts, <slot>s, ` +\n                `and by mutating the DOM rather than stylesheets.`;\n            } else {\n              message =\n                `Lit does not support binding inside script nodes. ` +\n                `This is a security risk, as it could allow arbitrary ` +\n                `code execution.`;\n            }\n          }\n          throw new Error(message);\n        }\n      }\n      debugLogEvent?.({\n        kind: 'commit node',\n        start: this._$startNode,\n        parent: this._$parent,\n        value: value,\n        options: this.options,\n      });\n      this._$committedValue = this._insert(value);\n    }\n  }\n\n  private _commitText(value: unknown): void {\n    // If the committed value is a primitive it means we called _commitText on\n    // the previous render, and we know that this._$startNode.nextSibling is a\n    // Text node. We can now just replace the text content (.data) of the node.\n    if (\n      this._$committedValue !== nothing &&\n      isPrimitive(this._$committedValue)\n    ) {\n      const node = wrap(this._$startNode).nextSibling as Text;\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(node, 'data', 'property');\n        }\n        value = this._textSanitizer(value);\n      }\n      debugLogEvent?.({\n        kind: 'commit text',\n        node,\n        value,\n        options: this.options,\n      });\n      (node as Text).data = value as string;\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        const textNode = document.createTextNode('');\n        this._commitNode(textNode);\n        // When setting text content, for security purposes it matters a lot\n        // what the parent is. For example, <style> and <script> need to be\n        // handled with care, while <span> does not. So first we need to put a\n        // text node into the document, then we can sanitize its content.\n        if (this._textSanitizer === undefined) {\n          this._textSanitizer = createSanitizer(textNode, 'data', 'property');\n        }\n        value = this._textSanitizer(value);\n        debugLogEvent?.({\n          kind: 'commit text',\n          node: textNode,\n          value,\n          options: this.options,\n        });\n        textNode.data = value as string;\n      } else {\n        this._commitNode(d.createTextNode(value as string));\n        debugLogEvent?.({\n          kind: 'commit text',\n          node: wrap(this._$startNode).nextSibling as Text,\n          value,\n          options: this.options,\n        });\n      }\n    }\n    this._$committedValue = value;\n  }\n\n  private _commitTemplateResult(\n    result: TemplateResult | CompiledTemplateResult\n  ): void {\n    // This property needs to remain unminified.\n    const {values, ['_$litType$']: type} = result;\n    // If $litType$ is a number, result is a plain TemplateResult and we get\n    // the template from the template cache. If not, result is a\n    // CompiledTemplateResult and _$litType$ is a CompiledTemplate and we need\n    // to create the <template> element the first time we see it.\n    const template: Template | CompiledTemplate =\n      typeof type === 'number'\n        ? this._$getTemplate(result as TemplateResult)\n        : (type.el === undefined &&\n            (type.el = Template.createElement(type.h, this.options)),\n          type);\n\n    if ((this._$committedValue as TemplateInstance)?._$template === template) {\n      debugLogEvent?.({\n        kind: 'template updating',\n        template,\n        instance: this._$committedValue as TemplateInstance,\n        parts: (this._$committedValue as TemplateInstance)._parts,\n        options: this.options,\n        values,\n      });\n      (this._$committedValue as TemplateInstance)._update(values);\n    } else {\n      const instance = new TemplateInstance(template as Template, this);\n      const fragment = instance._clone(this.options);\n      debugLogEvent?.({\n        kind: 'template instantiated',\n        template,\n        instance,\n        parts: instance._parts,\n        options: this.options,\n        fragment,\n        values,\n      });\n      instance._update(values);\n      debugLogEvent?.({\n        kind: 'template instantiated and updated',\n        template,\n        instance,\n        parts: instance._parts,\n        options: this.options,\n        fragment,\n        values,\n      });\n      this._commitNode(fragment);\n      this._$committedValue = instance;\n    }\n  }\n\n  // Overridden via `litHtmlPolyfillSupport` to provide platform support.\n  /** @internal */\n  _$getTemplate(result: TemplateResult) {\n    let template = templateCache.get(result.strings);\n    if (template === undefined) {\n      templateCache.set(result.strings, (template = new Template(result)));\n    }\n    return template;\n  }\n\n  private _commitIterable(value: Iterable<unknown>): void {\n    // For an Iterable, we create a new InstancePart per item, then set its\n    // value to the item. This is a little bit of overhead for every item in\n    // an Iterable, but it lets us recurse easily and efficiently update Arrays\n    // of TemplateResults that will be commonly returned from expressions like:\n    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n\n    // If value is an array, then the previous render was of an\n    // iterable and value will contain the ChildParts from the previous\n    // render. If value is not an array, clear this part and make a new\n    // array for ChildParts.\n    if (!isArray(this._$committedValue)) {\n      this._$committedValue = [];\n      this._$clear();\n    }\n\n    // Lets us keep track of how many items we stamped so we can clear leftover\n    // items from a previous render\n    const itemParts = this._$committedValue as ChildPart[];\n    let partIndex = 0;\n    let itemPart: ChildPart | undefined;\n\n    for (const item of value) {\n      if (partIndex === itemParts.length) {\n        // If no existing part, create a new one\n        // TODO (justinfagnani): test perf impact of always creating two parts\n        // instead of sharing parts between nodes\n        // https://github.com/lit/lit/issues/1266\n        itemParts.push(\n          (itemPart = new ChildPart(\n            this._insert(createMarker()),\n            this._insert(createMarker()),\n            this,\n            this.options\n          ))\n        );\n      } else {\n        // Reuse an existing part\n        itemPart = itemParts[partIndex];\n      }\n      itemPart._$setValue(item);\n      partIndex++;\n    }\n\n    if (partIndex < itemParts.length) {\n      // itemParts always have end nodes\n      this._$clear(\n        itemPart && wrap(itemPart._$endNode!).nextSibling,\n        partIndex\n      );\n      // Truncate the parts array so _value reflects the current state\n      itemParts.length = partIndex;\n    }\n  }\n\n  /**\n   * Removes the nodes contained within this Part from the DOM.\n   *\n   * @param start Start node to clear from, for clearing a subset of the part's\n   *     DOM (used when truncating iterables)\n   * @param from  When `start` is specified, the index within the iterable from\n   *     which ChildParts are being removed, used for disconnecting directives in\n   *     those Parts.\n   *\n   * @internal\n   */\n  _$clear(\n    start: ChildNode | null = wrap(this._$startNode).nextSibling,\n    from?: number\n  ) {\n    this._$notifyConnectionChanged?.(false, true, from);\n    while (start && start !== this._$endNode) {\n      const n = wrap(start!).nextSibling;\n      (wrap(start!) as Element).remove();\n      start = n;\n    }\n  }\n  /**\n   * Implementation of RootPart's `isConnected`. Note that this metod\n   * should only be called on `RootPart`s (the `ChildPart` returned from a\n   * top-level `render()` call). It has no effect on non-root ChildParts.\n   * @param isConnected Whether to set\n   * @internal\n   */\n  setConnected(isConnected: boolean) {\n    if (this._$parent === undefined) {\n      this.__isConnected = isConnected;\n      this._$notifyConnectionChanged?.(isConnected);\n    } else if (DEV_MODE) {\n      throw new Error(\n        'part.setConnected() may only be called on a ' +\n          'RootPart returned from render().'\n      );\n    }\n  }\n}\n\n/**\n * A top-level `ChildPart` returned from `render` that manages the connected\n * state of `AsyncDirective`s created throughout the tree below it.\n */\nexport interface RootPart extends ChildPart {\n  /**\n   * Sets the connection state for `AsyncDirective`s contained within this root\n   * ChildPart.\n   *\n   * lit-html does not automatically monitor the connectedness of DOM rendered;\n   * as such, it is the responsibility of the caller to `render` to ensure that\n   * `part.setConnected(false)` is called before the part object is potentially\n   * discarded, to ensure that `AsyncDirective`s have a chance to dispose of\n   * any resources being held. If a `RootPart` that was prevously\n   * disconnected is subsequently re-connected (and its `AsyncDirective`s should\n   * re-connect), `setConnected(true)` should be called.\n   *\n   * @param isConnected Whether directives within this tree should be connected\n   * or not\n   */\n  setConnected(isConnected: boolean): void;\n}\n\nexport type {AttributePart};\nclass AttributePart implements Disconnectable {\n  readonly type = ATTRIBUTE_PART as\n    | typeof ATTRIBUTE_PART\n    | typeof PROPERTY_PART\n    | typeof BOOLEAN_ATTRIBUTE_PART\n    | typeof EVENT_PART;\n  readonly element: HTMLElement;\n  readonly name: string;\n  readonly options: RenderOptions | undefined;\n\n  /**\n   * If this attribute part represents an interpolation, this contains the\n   * static strings of the interpolation. For single-value, complete bindings,\n   * this is undefined.\n   */\n  readonly strings?: ReadonlyArray<string>;\n  /** @internal */\n  _$committedValue: unknown | Array<unknown> = nothing;\n  /** @internal */\n  __directives?: Array<Directive | undefined>;\n  /** @internal */\n  _$parent: Disconnectable;\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  protected _sanitizer: ValueSanitizer | undefined;\n\n  get tagName() {\n    return this.element.tagName;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  constructor(\n    element: HTMLElement,\n    name: string,\n    strings: ReadonlyArray<string>,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    this.element = element;\n    this.name = name;\n    this._$parent = parent;\n    this.options = options;\n    if (strings.length > 2 || strings[0] !== '' || strings[1] !== '') {\n      this._$committedValue = new Array(strings.length - 1).fill(new String());\n      this.strings = strings;\n    } else {\n      this._$committedValue = nothing;\n    }\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      this._sanitizer = undefined;\n    }\n  }\n\n  /**\n   * Sets the value of this part by resolving the value from possibly multiple\n   * values and static strings and committing it to the DOM.\n   * If this part is single-valued, `this._strings` will be undefined, and the\n   * method will be called with a single value argument. If this part is\n   * multi-value, `this._strings` will be defined, and the method is called\n   * with the value array of the part's owning TemplateInstance, and an offset\n   * into the value array from which the values should be read.\n   * This method is overloaded this way to eliminate short-lived array slices\n   * of the template instance values, and allow a fast-path for single-valued\n   * parts.\n   *\n   * @param value The part value, or an array of values for multi-valued parts\n   * @param valueIndex the index to start reading values from. `undefined` for\n   *   single-valued parts\n   * @param noCommit causes the part to not commit its value to the DOM. Used\n   *   in hydration to prime attribute parts with their first-rendered value,\n   *   but not set the attribute, and in SSR to no-op the DOM operation and\n   *   capture the value for serialization.\n   *\n   * @internal\n   */\n  _$setValue(\n    value: unknown | Array<unknown>,\n    directiveParent: DirectiveParent = this,\n    valueIndex?: number,\n    noCommit?: boolean\n  ) {\n    const strings = this.strings;\n\n    // Whether any of the values has changed, for dirty-checking\n    let change = false;\n\n    if (strings === undefined) {\n      // Single-value binding case\n      value = resolveDirective(this, value, directiveParent, 0);\n      change =\n        !isPrimitive(value) ||\n        (value !== this._$committedValue && value !== noChange);\n      if (change) {\n        this._$committedValue = value;\n      }\n    } else {\n      // Interpolation case\n      const values = value as Array<unknown>;\n      value = strings[0];\n\n      let i, v;\n      for (i = 0; i < strings.length - 1; i++) {\n        v = resolveDirective(this, values[valueIndex! + i], directiveParent, i);\n\n        if (v === noChange) {\n          // If the user-provided value is `noChange`, use the previous value\n          v = (this._$committedValue as Array<unknown>)[i];\n        }\n        change ||=\n          !isPrimitive(v) || v !== (this._$committedValue as Array<unknown>)[i];\n        if (v === nothing) {\n          value = nothing;\n        } else if (value !== nothing) {\n          value += (v ?? '') + strings[i + 1];\n        }\n        // We always record each value, even if one is `nothing`, for future\n        // change detection.\n        (this._$committedValue as Array<unknown>)[i] = v;\n      }\n    }\n    if (change && !noCommit) {\n      this._commitValue(value);\n    }\n  }\n\n  /** @internal */\n  _commitValue(value: unknown) {\n    if (value === nothing) {\n      (wrap(this.element) as Element).removeAttribute(this.name);\n    } else {\n      if (ENABLE_EXTRA_SECURITY_HOOKS) {\n        if (this._sanitizer === undefined) {\n          this._sanitizer = sanitizerFactoryInternal(\n            this.element,\n            this.name,\n            'attribute'\n          );\n        }\n        value = this._sanitizer(value ?? '');\n      }\n      debugLogEvent?.({\n        kind: 'commit attribute',\n        element: this.element,\n        name: this.name,\n        value,\n        options: this.options,\n      });\n      (wrap(this.element) as Element).setAttribute(\n        this.name,\n        (value ?? '') as string\n      );\n    }\n  }\n}\n\nexport type {PropertyPart};\nclass PropertyPart extends AttributePart {\n  override readonly type = PROPERTY_PART;\n\n  /** @internal */\n  override _commitValue(value: unknown) {\n    if (ENABLE_EXTRA_SECURITY_HOOKS) {\n      if (this._sanitizer === undefined) {\n        this._sanitizer = sanitizerFactoryInternal(\n          this.element,\n          this.name,\n          'property'\n        );\n      }\n      value = this._sanitizer(value);\n    }\n    debugLogEvent?.({\n      kind: 'commit property',\n      element: this.element,\n      name: this.name,\n      value,\n      options: this.options,\n    });\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (this.element as any)[this.name] = value === nothing ? undefined : value;\n  }\n}\n\n// Temporary workaround for https://crbug.com/993268\n// Currently, any attribute starting with \"on\" is considered to be a\n// TrustedScript source. Such boolean attributes must be set to the equivalent\n// trusted emptyScript value.\nconst emptyStringForBooleanAttribute = trustedTypes\n  ? (trustedTypes.emptyScript as unknown as '')\n  : '';\n\nexport type {BooleanAttributePart};\nclass BooleanAttributePart extends AttributePart {\n  override readonly type = BOOLEAN_ATTRIBUTE_PART;\n\n  /** @internal */\n  override _commitValue(value: unknown) {\n    debugLogEvent?.({\n      kind: 'commit boolean attribute',\n      element: this.element,\n      name: this.name,\n      value: !!(value && value !== nothing),\n      options: this.options,\n    });\n    if (value && value !== nothing) {\n      (wrap(this.element) as Element).setAttribute(\n        this.name,\n        emptyStringForBooleanAttribute\n      );\n    } else {\n      (wrap(this.element) as Element).removeAttribute(this.name);\n    }\n  }\n}\n\ntype EventListenerWithOptions = EventListenerOrEventListenerObject &\n  Partial<AddEventListenerOptions>;\n\n/**\n * An AttributePart that manages an event listener via add/removeEventListener.\n *\n * This part works by adding itself as the event listener on an element, then\n * delegating to the value passed to it. This reduces the number of calls to\n * add/removeEventListener if the listener changes frequently, such as when an\n * inline function is used as a listener.\n *\n * Because event options are passed when adding listeners, we must take case\n * to add and remove the part as a listener when the event options change.\n */\nexport type {EventPart};\nclass EventPart extends AttributePart {\n  override readonly type = EVENT_PART;\n\n  constructor(\n    element: HTMLElement,\n    name: string,\n    strings: ReadonlyArray<string>,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    super(element, name, strings, parent, options);\n\n    if (DEV_MODE && this.strings !== undefined) {\n      throw new Error(\n        `A \\`<${element.localName}>\\` has a \\`@${name}=...\\` listener with ` +\n          'invalid content. Event listeners in templates must have exactly ' +\n          'one expression and no surrounding text.'\n      );\n    }\n  }\n\n  // EventPart does not use the base _$setValue/_resolveValue implementation\n  // since the dirty checking is more complex\n  /** @internal */\n  override _$setValue(\n    newListener: unknown,\n    directiveParent: DirectiveParent = this\n  ) {\n    newListener =\n      resolveDirective(this, newListener, directiveParent, 0) ?? nothing;\n    if (newListener === noChange) {\n      return;\n    }\n    const oldListener = this._$committedValue;\n\n    // If the new value is nothing or any options change we have to remove the\n    // part as a listener.\n    const shouldRemoveListener =\n      (newListener === nothing && oldListener !== nothing) ||\n      (newListener as EventListenerWithOptions).capture !==\n        (oldListener as EventListenerWithOptions).capture ||\n      (newListener as EventListenerWithOptions).once !==\n        (oldListener as EventListenerWithOptions).once ||\n      (newListener as EventListenerWithOptions).passive !==\n        (oldListener as EventListenerWithOptions).passive;\n\n    // If the new value is not nothing and we removed the listener, we have\n    // to add the part as a listener.\n    const shouldAddListener =\n      newListener !== nothing &&\n      (oldListener === nothing || shouldRemoveListener);\n\n    debugLogEvent?.({\n      kind: 'commit event listener',\n      element: this.element,\n      name: this.name,\n      value: newListener,\n      options: this.options,\n      removeListener: shouldRemoveListener,\n      addListener: shouldAddListener,\n      oldListener,\n    });\n    if (shouldRemoveListener) {\n      this.element.removeEventListener(\n        this.name,\n        this,\n        oldListener as EventListenerWithOptions\n      );\n    }\n    if (shouldAddListener) {\n      // Beware: IE11 and Chrome 41 don't like using the listener as the\n      // options object. Figure out how to deal w/ this in IE11 - maybe\n      // patch addEventListener?\n      this.element.addEventListener(\n        this.name,\n        this,\n        newListener as EventListenerWithOptions\n      );\n    }\n    this._$committedValue = newListener;\n  }\n\n  handleEvent(event: Event) {\n    if (typeof this._$committedValue === 'function') {\n      this._$committedValue.call(this.options?.host ?? this.element, event);\n    } else {\n      (this._$committedValue as EventListenerObject).handleEvent(event);\n    }\n  }\n}\n\nexport type {ElementPart};\nclass ElementPart implements Disconnectable {\n  readonly type = ELEMENT_PART;\n\n  /** @internal */\n  __directive?: Directive;\n\n  // This is to ensure that every Part has a _$committedValue\n  _$committedValue: undefined;\n\n  /** @internal */\n  _$parent!: Disconnectable;\n\n  /** @internal */\n  _$disconnectableChildren?: Set<Disconnectable> = undefined;\n\n  options: RenderOptions | undefined;\n\n  constructor(\n    public element: Element,\n    parent: Disconnectable,\n    options: RenderOptions | undefined\n  ) {\n    this._$parent = parent;\n    this.options = options;\n  }\n\n  // See comment in Disconnectable interface for why this is a getter\n  get _$isConnected() {\n    return this._$parent._$isConnected;\n  }\n\n  _$setValue(value: unknown): void {\n    debugLogEvent?.({\n      kind: 'commit to element binding',\n      element: this.element,\n      value,\n      options: this.options,\n    });\n    resolveDirective(this, value);\n  }\n}\n\n/**\n * END USERS SHOULD NOT RELY ON THIS OBJECT.\n *\n * Private exports for use by other Lit packages, not intended for use by\n * external users.\n *\n * We currently do not make a mangled rollup build of the lit-ssr code. In order\n * to keep a number of (otherwise private) top-level exports  mangled in the\n * client side code, we export a _$LH object containing those members (or\n * helper methods for accessing private fields of those members), and then\n * re-export them for use in lit-ssr. This keeps lit-ssr agnostic to whether the\n * client-side code is being used in `dev` mode or `prod` mode.\n *\n * This has a unique name, to disambiguate it from private exports in\n * lit-element, which re-exports all of lit-html.\n *\n * @private\n */\nexport const _$LH = {\n  // Used in lit-ssr\n  _boundAttributeSuffix: boundAttributeSuffix,\n  _marker: marker,\n  _markerMatch: markerMatch,\n  _HTML_RESULT: HTML_RESULT,\n  _getTemplateHtml: getTemplateHtml,\n  // Used in hydrate\n  _TemplateInstance: TemplateInstance,\n  _isIterable: isIterable,\n  _resolveDirective: resolveDirective,\n  // Used in tests and private-ssr-support\n  _ChildPart: ChildPart,\n  _AttributePart: AttributePart,\n  _BooleanAttributePart: BooleanAttributePart,\n  _EventPart: EventPart,\n  _PropertyPart: PropertyPart,\n  _ElementPart: ElementPart,\n};\n\n// Apply polyfills if available\nconst polyfillSupport = DEV_MODE\n  ? window.litHtmlPolyfillSupportDevMode\n  : window.litHtmlPolyfillSupport;\npolyfillSupport?.(Template, ChildPart);\n\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n(globalThis.litHtmlVersions ??= []).push('2.2.7');\nif (DEV_MODE && globalThis.litHtmlVersions.length > 1) {\n  issueWarning!(\n    'multiple-versions',\n    `Multiple versions of Lit loaded. ` +\n      `Loading multiple versions is not recommended.`\n  );\n}\n"]},"metadata":{},"sourceType":"module"}